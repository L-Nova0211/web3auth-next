{"version":3,"file":"static/js/501.b28c4bf0.chunk.js","mappings":"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","sources":["../node_modules/@metamask/detect-provider/src/index.ts","../node_modules/@web3auth/base-evm-adapter/src/baseEvmAdapter.ts","../node_modules/@web3auth/metamask-adapter/src/metamaskAdapter.ts"],"sourcesContent":["interface MetaMaskEthereumProvider {\n  isMetaMask?: boolean;\n  once(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  on(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  off(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  addListener(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  removeListener(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  removeAllListeners(event?: string | symbol): this;\n}\n\ninterface Window {\n  ethereum?: MetaMaskEthereumProvider;\n}\n\nexport = detectEthereumProvider;\n\n/**\n * Returns a Promise that resolves to the value of window.ethereum if it is\n * set within the given timeout, or null.\n * The Promise will not reject, but an error will be thrown if invalid options\n * are provided.\n *\n * @param options - Options bag.\n * @param options.mustBeMetaMask - Whether to only look for MetaMask providers.\n * Default: false\n * @param options.silent - Whether to silence console errors. Does not affect\n * thrown errors. Default: false\n * @param options.timeout - Milliseconds to wait for 'ethereum#initialized' to\n * be dispatched. Default: 3000\n * @returns A Promise that resolves with the Provider if it is detected within\n * given timeout, otherwise null.\n */\nfunction detectEthereumProvider<T = MetaMaskEthereumProvider>({\n  mustBeMetaMask = false,\n  silent = false,\n  timeout = 3000,\n} = {}): Promise<T | null> {\n\n  _validateInputs();\n\n  let handled = false;\n\n  return new Promise((resolve) => {\n    if ((window as Window).ethereum) {\n\n      handleEthereum();\n\n    } else {\n\n      window.addEventListener(\n        'ethereum#initialized',\n        handleEthereum,\n        { once: true },\n      );\n\n      setTimeout(() => {\n        handleEthereum();\n      }, timeout);\n    }\n\n    function handleEthereum() {\n\n      if (handled) {\n        return;\n      }\n      handled = true;\n\n      window.removeEventListener('ethereum#initialized', handleEthereum);\n\n      const { ethereum } = window as Window;\n\n      if (ethereum && (!mustBeMetaMask || ethereum.isMetaMask)) {\n        resolve(ethereum as unknown as T);\n      } else {\n\n        const message = mustBeMetaMask && ethereum\n          ? 'Non-MetaMask window.ethereum detected.'\n          : 'Unable to detect window.ethereum.';\n\n        !silent && console.error('@metamask/detect-provider:', message);\n        resolve(null);\n      }\n    }\n  });\n\n  function _validateInputs() {\n    if (typeof mustBeMetaMask !== 'boolean') {\n      throw new Error(`@metamask/detect-provider: Expected option 'mustBeMetaMask' to be a boolean.`);\n    }\n    if (typeof silent !== 'boolean') {\n      throw new Error(`@metamask/detect-provider: Expected option 'silent' to be a boolean.`);\n    }\n    if (typeof timeout !== 'number') {\n      throw new Error(`@metamask/detect-provider: Expected option 'timeout' to be a number.`);\n    }\n  }\n}\n","import {\n  ADAPTER_STATUS,\n  BaseAdapter,\n  checkIfTokenIsExpired,\n  clearToken,\n  getSavedToken,\n  saveToken,\n  signChallenge,\n  UserAuthInfo,\n  verifySignedChallenge,\n  WalletLoginError,\n} from \"@web3auth/base\";\n\nexport abstract class BaseEvmAdapter<T> extends BaseAdapter<T> {\n  public clientId: string;\n\n  constructor(params: { clientId?: string } = {}) {\n    super();\n    this.clientId = params.clientId;\n  }\n\n  async authenticateUser(): Promise<UserAuthInfo> {\n    if (!this.provider || !this.chainConfig?.chainId) throw WalletLoginError.notConnectedError();\n    const { chainNamespace, chainId } = this.chainConfig;\n\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    const accounts = await this.provider.request<string[]>({\n      method: \"eth_accounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      const existingToken = getSavedToken(accounts[0] as string, this.name);\n      if (existingToken) {\n        const isExpired = checkIfTokenIsExpired(existingToken);\n        if (!isExpired) {\n          return { idToken: existingToken };\n        }\n      }\n\n      const payload = {\n        domain: window.location.origin,\n        uri: window.location.href,\n        address: accounts[0],\n        chainId: parseInt(chainId, 16),\n        version: \"1\",\n        nonce: Math.random().toString(36).slice(2),\n        issuedAt: new Date().toISOString(),\n      };\n\n      const challenge = await signChallenge(payload, chainNamespace);\n\n      const signedMessage = await this.provider.request<string>({\n        method: \"personal_sign\",\n        params: [challenge, accounts[0]],\n      });\n\n      const idToken = await verifySignedChallenge(chainNamespace, signedMessage as string, challenge, this.name, this.sessionTime, this.clientId);\n      saveToken(accounts[0] as string, this.name, idToken);\n      return {\n        idToken,\n      };\n    }\n    throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n  }\n\n  async disconnect(): Promise<void> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.disconnectionError(\"Not connected with wallet\");\n    const accounts = await this.provider.request<string[]>({\n      method: \"eth_accounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      clearToken(accounts[0], this.name);\n    }\n  }\n}\n","import detectEthereumProvider from \"@metamask/detect-provider\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  getChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n} from \"@web3auth/base\";\nimport { BaseEvmAdapter } from \"@web3auth/base-evm-adapter\";\n\ninterface EthereumProvider extends SafeEventEmitterProvider {\n  isMetaMask?: boolean;\n  isConnected: () => boolean;\n  chainId: string;\n}\nexport interface MetamaskAdapterOptions {\n  chainConfig?: CustomChainConfig;\n  sessionTime?: number;\n  clientId?: string;\n}\n\nclass MetamaskAdapter extends BaseEvmAdapter<void> {\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.EIP155;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  readonly name: string = WALLET_ADAPTERS.METAMASK;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  private rehydrated = false;\n\n  private metamaskProvider: EthereumProvider | null = null;\n\n  constructor(adapterOptions: MetamaskAdapterOptions) {\n    super(adapterOptions);\n    this.chainConfig = adapterOptions?.chainConfig || null;\n    this.sessionTime = adapterOptions?.sessionTime || 86400;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.metamaskProvider) {\n      return this.metamaskProvider as SafeEventEmitterProvider;\n    }\n    return null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    this.metamaskProvider = (await detectEthereumProvider({ mustBeMetaMask: true })) as EthereumProvider;\n    if (!this.metamaskProvider) throw WalletInitializationError.notInstalled(\"Metamask extension is not installed\");\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.METAMASK);\n    try {\n      log.debug(\"initializing metamask adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  setAdapterSettings(options: { sessionTime?: number; clientId?: string }): void {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    if (options?.sessionTime) {\n      this.sessionTime = options.sessionTime;\n    }\n    if (options?.clientId) {\n      this.clientId = options.clientId;\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    // set default to mainnet\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.METAMASK });\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not able to connect with metamask\");\n    try {\n      await this.metamaskProvider.request({ method: \"eth_requestAccounts\" });\n      const { chainId } = this.metamaskProvider;\n      if (chainId !== (this.chainConfig as CustomChainConfig).chainId) {\n        await this.switchChain(this.chainConfig as CustomChainConfig);\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Failed to connect with provider\");\n      this.provider.once(\"disconnect\", () => {\n        // ready to be connected again\n        this.disconnect();\n      });\n      this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.METAMASK, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with metamask wallet\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    await super.disconnect();\n    this.provider?.removeAllListeners();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.metamaskProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  private async switchChain(chainConfig: CustomChainConfig): Promise<void> {\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    try {\n      await this.metamaskProvider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId: chainConfig.chainId }],\n      });\n    } catch (switchError: unknown) {\n      // This error code indicates that the chain has not been added to MetaMask.\n      if ((switchError as { code: number }).code === 4902) {\n        await this.metamaskProvider.request({\n          method: \"wallet_addEthereumChain\",\n          params: [{ chainId: chainConfig.chainId, chainName: chainConfig.displayName, rpcUrls: [chainConfig.rpcTarget] }],\n        });\n      } else {\n        throw switchError;\n      }\n    }\n  }\n}\n\nexport { MetamaskAdapter };\n"],"names":["module","mustBeMetaMask","silent","timeout","_validateInputs","handled","Promise","resolve","handleEthereum","window","removeEventListener","ethereum","isMetaMask","message","console","error","addEventListener","once","setTimeout","Error","BaseEvmAdapter","_inherits","params","arguments","_classCallCheck","_this","_defineProperty","clientId","_createClass","key","value","_authenticateUser","this","provider","chainConfig","chainId","_context","WalletLoginError","_this$chainConfig2","chainNamespace","status","ADAPTER_STATUS","request","method","accounts","length","existingToken","getSavedToken","name","checkIfTokenIsExpired","idToken","payload","domain","location","origin","uri","href","address","parseInt","version","nonce","Math","random","toString","slice","issuedAt","Date","toISOString","signChallenge","challenge","signedMessage","verifySignedChallenge","sessionTime","saveToken","_disconnect","_context2","clearToken","BaseAdapter","MetamaskAdapter","adapterOptions","ADAPTER_NAMESPACES","CHAIN_NAMESPACES","ADAPTER_CATEGORY","WALLET_ADAPTERS","get","metamaskProvider","set","_","options","_get","detectEthereumProvider","WalletInitializationError","emit","ADAPTER_EVENTS","log","autoConnect","rehydrated","connect","_connect","getChainConfig","adapter","switchChain","_this2","disconnect","reconnected","_args3","cleanup","_context3","removeAllListeners","_getUserInfo","_context4","_context5","code","chainName","displayName","rpcUrls","rpcTarget"],"sourceRoot":""}