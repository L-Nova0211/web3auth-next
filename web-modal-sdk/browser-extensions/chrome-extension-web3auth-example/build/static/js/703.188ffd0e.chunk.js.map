{"version":3,"file":"static/js/703.188ffd0e.chunk.js","mappings":"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","sources":["../../src/Layout.ts","../node_modules/@noble/hashes/esm/_assert.js","../node_modules/@noble/hashes/esm/utils.js","../node_modules/@noble/hashes/esm/cryptoBrowser.js","../node_modules/@noble/hashes/esm/_sha2.js","../node_modules/@noble/hashes/esm/_u64.js","../node_modules/@noble/hashes/esm/sha512.js","../node_modules/@noble/ed25519/lib/esm/index.js","../node_modules/@noble/hashes/esm/sha256.js","../node_modules/superstruct/src/error.ts","../node_modules/superstruct/src/utils.ts","../node_modules/superstruct/src/struct.ts","../node_modules/superstruct/src/structs/utilities.ts","../node_modules/superstruct/src/structs/types.ts","../node_modules/superstruct/src/structs/coercions.ts","../node_modules/@noble/hashes/esm/sha3.js","../node_modules/@noble/hashes/esm/hmac.js","../node_modules/@noble/secp256k1/lib/esm/index.js","../node_modules/@solana/web3.js/src/utils/ed25519.ts","../node_modules/@solana/web3.js/src/utils/to-buffer.ts","../node_modules/@solana/web3.js/src/utils/borsh-schema.ts","../node_modules/@solana/web3.js/src/publickey.ts","../node_modules/@solana/web3.js/src/bpf-loader-deprecated.ts","../node_modules/@solana/web3.js/src/transaction/constants.ts","../node_modules/@solana/web3.js/src/transaction/expiry-custom-errors.ts","../node_modules/@solana/web3.js/src/message/account-keys.ts","../node_modules/@solana/web3.js/src/layout.ts","../node_modules/@solana/web3.js/src/utils/shortvec-encoding.ts","../node_modules/@solana/web3.js/src/utils/assert.ts","../node_modules/@solana/web3.js/src/message/compiled-keys.ts","../node_modules/@solana/web3.js/src/message/legacy.ts","../node_modules/@solana/web3.js/src/message/v0.ts","../node_modules/@solana/web3.js/src/transaction/legacy.ts","../node_modules/@solana/web3.js/src/sysvar.ts","../node_modules/@solana/web3.js/src/utils/send-and-confirm-transaction.ts","../node_modules/@solana/web3.js/src/utils/sleep.ts","../node_modules/@solana/web3.js/src/instruction.ts","../node_modules/@solana/web3.js/src/fee-calculator.ts","../node_modules/@solana/web3.js/src/nonce-account.ts","../node_modules/@solana/web3.js/src/utils/bigint.ts","../node_modules/@solana/web3.js/src/programs/system.ts","../node_modules/@solana/web3.js/src/loader.ts","../node_modules/@solana/web3.js/src/bpf-loader.ts","../node_modules/@solana/web3.js/node_modules/fast-stable-stringify/index.js","../node_modules/@solana/web3.js/src/epoch-schedule.ts","../node_modules/@solana/web3.js/src/errors.ts","../node_modules/@solana/web3.js/src/__forks__/browser/fetch-impl.ts","../node_modules/@solana/web3.js/src/programs/address-lookup-table/state.ts","../node_modules/@solana/web3.js/src/account-data.ts","../node_modules/@solana/web3.js/src/utils/makeWebsocketUrl.ts","../node_modules/@solana/web3.js/src/connection.ts","../node_modules/@solana/web3.js/src/keypair.ts","../node_modules/@solana/web3.js/src/programs/address-lookup-table/index.ts","../node_modules/@solana/web3.js/src/programs/compute-budget.ts","../node_modules/@solana/web3.js/src/programs/ed25519.ts","../node_modules/@solana/web3.js/src/utils/secp256k1.ts","../node_modules/@solana/web3.js/src/programs/secp256k1.ts","../node_modules/@solana/web3.js/src/programs/stake.ts","../node_modules/@solana/web3.js/src/programs/vote.ts","../node_modules/@solana/web3.js/src/validator-info.ts","../node_modules/@solana/web3.js/src/vote-account.ts","../node_modules/@solana/web3.js/node_modules/base-x/src/index.js","../node_modules/@solana/web3.js/node_modules/bs58/index.js","../node_modules/@solana/web3.js/node_modules/buffer/index.js","../node_modules/@web3auth/solana-provider/src/rpc/JrpcClient.ts","../node_modules/@web3auth/solana-provider/src/rpc/solanaRpcMiddlewares.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/base/baseInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/base/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/injectedProviderProxy.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/phantom/phantomInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/slope/slopeInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/slope/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/solflare/solflareInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/solflare/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/sollet/solletInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/sollet/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/torus/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/torus/torusInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/privateKeyProvider/solanaPrivateKeyUtils.ts","../node_modules/@web3auth/solana-provider/src/providers/privateKeyProvider/solanaPrivateKeyProvider.ts","../node_modules/@web3auth/solana-provider/src/solanaWallet.ts","../node_modules/@web3auth/solana-provider/node_modules/base-x/src/index.js","../node_modules/@web3auth/solana-provider/node_modules/bs58/index.js","../node_modules/bigint-buffer/dist/browser.js","../node_modules/borsh/lib/index.js","../node_modules/borsh/node_modules/base-x/src/index.js","../node_modules/borsh/node_modules/bs58/index.js","../node_modules/eventemitter3/index.js","../node_modules/jayson/lib/client/browser/index.js","../node_modules/jayson/lib/generateRequest.js","../node_modules/rpc-websockets/dist/index.browser.js","../node_modules/rpc-websockets/dist/lib/client.js","../node_modules/rpc-websockets/dist/lib/client/websocket.browser.js","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/v4.js","../node_modules/@babel/runtime/helpers/assertThisInitialized.js","../node_modules/@babel/runtime/helpers/asyncToGenerator.js","../node_modules/@babel/runtime/helpers/classCallCheck.js","../node_modules/@babel/runtime/helpers/createClass.js","../node_modules/@babel/runtime/helpers/getPrototypeOf.js","../node_modules/@babel/runtime/helpers/inherits.js","../node_modules/@babel/runtime/helpers/interopRequireDefault.js","../node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","../node_modules/@babel/runtime/helpers/setPrototypeOf.js","../node_modules/text-encoding-utf-8/lib/encoding.lib.mjs"],"sourcesContent":[null,"export function number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nexport function bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nexport function bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new TypeError('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nexport function hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nexport function exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nexport function output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nconst assert = {\n    number,\n    bool,\n    bytes,\n    hash,\n    exists,\n    output,\n};\nexport default assert;\n","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// The import here is via the package name. This is to ensure\n// that exports mapping/resolution does fall into place.\nimport { crypto } from '@noble/hashes/crypto';\n// Cast array to different type\nexport const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nexport const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// There is almost no big endian hardware, but js typed arrays uses platform specific endianness.\n// So, just to be sure not to corrupt anything.\nif (!isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef]))\n */\nexport function bytesToHex(uint8a) {\n    // pre-caching improves the speed 6x\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\n/**\n * @example hexToBytes('deadbeef')\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow. However, call to async function will return Promise\n// which will be fullfiled only on next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string') {\n        throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n    }\n    return new TextEncoder().encode(str);\n}\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!(data instanceof Uint8Array))\n        throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n    return data;\n}\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n */\nexport function concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\n// For runtime check if class implements interface\nexport class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n        throw new TypeError('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexport function wrapConstructor(hashConstructor) {\n    const hashC = (message) => hashConstructor().update(toBytes(message)).digest();\n    const tmp = hashConstructor();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashConstructor();\n    return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG\n */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto.web) {\n        return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n    }\n    else if (crypto.node) {\n        return new Uint8Array(crypto.node.randomBytes(bytesLength).buffer);\n    }\n    else {\n        throw new Error(\"The environment doesn't have randomBytes function\");\n    }\n}\n","export const crypto = {\n    node: undefined,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\n","import assert from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js';\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nexport class SHA2 extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        assert.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        assert.exists(this);\n        assert.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        this.get().forEach((v, i) => oview.setUint32(4 * i, v, isLE));\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n","const U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nexport function fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nexport function split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nexport const toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h, l) => l;\nconst rotr32L = (h, l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nexport function add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n","import { SHA2 } from './_sha2.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = u64.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n)));\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = new Uint32Array(80);\nconst SHA512_W_L = new Uint32Array(80);\nexport class SHA512 extends SHA2 {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nclass SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nexport const sha512 = wrapConstructor(() => new SHA512());\nexport const sha512_256 = wrapConstructor(() => new SHA512_256());\nexport const sha384 = wrapConstructor(() => new SHA384());\n","/*! noble-ed25519 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst CU_O = BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989');\nconst CURVE = Object.freeze({\n    a: BigInt(-1),\n    d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n    P: BigInt('57896044618658097711785492504343953926634992332820282019728792003956564819949'),\n    l: CU_O,\n    n: CU_O,\n    h: BigInt(8),\n    Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n    Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n});\nexport { CURVE };\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nconst SQRT_M1 = BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\nconst SQRT_D = BigInt('6853475219497561581579357271197624642482790079785650197046958215289687604742');\nconst SQRT_AD_MINUS_ONE = BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\nconst INVSQRT_A_MINUS_D = BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\nconst ONE_MINUS_D_SQ = BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\nconst D_MINUS_ONE_SQ = BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\nclass ExtendedPoint {\n    constructor(x, y, z, t) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.t = t;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('ExtendedPoint#fromAffine: expected Point');\n        }\n        if (p.equals(Point.ZERO))\n            return ExtendedPoint.ZERO;\n        return new ExtendedPoint(p.x, p.y, _1n, mod(p.x * p.y));\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return this.toAffineBatch(points).map(this.fromAffine);\n    }\n    equals(other) {\n        assertExtPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const X1Z2 = mod(X1 * Z2);\n        const X2Z1 = mod(X2 * Z1);\n        const Y1Z2 = mod(Y1 * Z2);\n        const Y2Z1 = mod(Y2 * Z1);\n        return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n    negate() {\n        return new ExtendedPoint(mod(-this.x), this.y, this.z, mod(-this.t));\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { a } = CURVE;\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(_2n * mod(Z1 * Z1));\n        const D = mod(a * A);\n        const x1y1 = X1 + Y1;\n        const E = mod(mod(x1y1 * x1y1) - A - B);\n        const G = D + B;\n        const F = G - C;\n        const H = D - B;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    add(other) {\n        assertExtPoint(other);\n        const { x: X1, y: Y1, z: Z1, t: T1 } = this;\n        const { x: X2, y: Y2, z: Z2, t: T2 } = other;\n        const A = mod((Y1 - X1) * (Y2 + X2));\n        const B = mod((Y1 + X1) * (Y2 - X2));\n        const F = mod(B - A);\n        if (F === _0n)\n            return this.double();\n        const C = mod(Z1 * _2n * T2);\n        const D = mod(T1 * _2n * Z2);\n        const E = D + C;\n        const G = B + A;\n        const H = D - C;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    precomputeWindow(W) {\n        const windows = 1 + 256 / W;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(ExtendedPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = ExtendedPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = ExtendedPoint.ZERO;\n        let f = ExtendedPoint.ZERO;\n        const windows = 1 + 256 / W;\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            if (wbits === 0) {\n                let pr = precomputes[offset];\n                if (window % 2)\n                    pr = pr.negate();\n                f = f.add(pr);\n            }\n            else {\n                let cached = precomputes[offset + Math.abs(wbits) - 1];\n                if (wbits < 0)\n                    cached = cached.negate();\n                p = p.add(cached);\n            }\n        }\n        return ExtendedPoint.normalizeZ([p, f])[0];\n    }\n    multiply(scalar, affinePoint) {\n        return this.wNAF(normalizeScalar(scalar, CURVE.l), affinePoint);\n    }\n    multiplyUnsafe(scalar) {\n        let n = normalizeScalar(scalar, CURVE.l, false);\n        const G = ExtendedPoint.BASE;\n        const P0 = ExtendedPoint.ZERO;\n        if (n === _0n)\n            return P0;\n        if (this.equals(P0) || n === _1n)\n            return this;\n        if (this.equals(G))\n            return this.wNAF(n);\n        let p = P0;\n        let d = this;\n        while (n > _0n) {\n            if (n & _1n)\n                p = p.add(d);\n            d = d.double();\n            n >>= _1n;\n        }\n        return p;\n    }\n    isSmallOrder() {\n        return this.multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n    }\n    isTorsionFree() {\n        return this.multiplyUnsafe(CURVE.l).equals(ExtendedPoint.ZERO);\n    }\n    toAffine(invZ = invert(this.z)) {\n        const { x, y, z } = this;\n        const ax = mod(x * invZ);\n        const ay = mod(y * invZ);\n        const zz = mod(z * invZ);\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n    fromRistrettoBytes() {\n        legacyRist();\n    }\n    toRistrettoBytes() {\n        legacyRist();\n    }\n    fromRistrettoHash() {\n        legacyRist();\n    }\n}\nExtendedPoint.BASE = new ExtendedPoint(CURVE.Gx, CURVE.Gy, _1n, mod(CURVE.Gx * CURVE.Gy));\nExtendedPoint.ZERO = new ExtendedPoint(_0n, _1n, _1n, _0n);\nfunction assertExtPoint(other) {\n    if (!(other instanceof ExtendedPoint))\n        throw new TypeError('ExtendedPoint expected');\n}\nfunction assertRstPoint(other) {\n    if (!(other instanceof RistrettoPoint))\n        throw new TypeError('RistrettoPoint expected');\n}\nfunction legacyRist() {\n    throw new Error('Legacy method: switch to RistrettoPoint');\n}\nclass RistrettoPoint {\n    constructor(ep) {\n        this.ep = ep;\n    }\n    static calcElligatorRistrettoMap(r0) {\n        const { d } = CURVE;\n        const r = mod(SQRT_M1 * r0 * r0);\n        const Ns = mod((r + _1n) * ONE_MINUS_D_SQ);\n        let c = BigInt(-1);\n        const D = mod((c - d * r) * mod(r + d));\n        let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D);\n        let s_ = mod(s * r0);\n        if (!edIsNegative(s_))\n            s_ = mod(-s_);\n        if (!Ns_D_is_sq)\n            s = s_;\n        if (!Ns_D_is_sq)\n            c = r;\n        const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D);\n        const s2 = s * s;\n        const W0 = mod((s + s) * D);\n        const W1 = mod(Nt * SQRT_AD_MINUS_ONE);\n        const W2 = mod(_1n - s2);\n        const W3 = mod(_1n + s2);\n        return new ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n    }\n    static hashToCurve(hex) {\n        hex = ensureBytes(hex, 64);\n        const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n        const R1 = this.calcElligatorRistrettoMap(r1);\n        const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n        const R2 = this.calcElligatorRistrettoMap(r2);\n        return new RistrettoPoint(R1.add(R2));\n    }\n    static fromHex(hex) {\n        hex = ensureBytes(hex, 32);\n        const { a, d } = CURVE;\n        const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n        const s = bytes255ToNumberLE(hex);\n        if (!equalBytes(numberTo32BytesLE(s), hex) || edIsNegative(s))\n            throw new Error(emsg);\n        const s2 = mod(s * s);\n        const u1 = mod(_1n + a * s2);\n        const u2 = mod(_1n - a * s2);\n        const u1_2 = mod(u1 * u1);\n        const u2_2 = mod(u2 * u2);\n        const v = mod(a * d * u1_2 - u2_2);\n        const { isValid, value: I } = invertSqrt(mod(v * u2_2));\n        const Dx = mod(I * u2);\n        const Dy = mod(I * Dx * v);\n        let x = mod((s + s) * Dx);\n        if (edIsNegative(x))\n            x = mod(-x);\n        const y = mod(u1 * Dy);\n        const t = mod(x * y);\n        if (!isValid || edIsNegative(t) || y === _0n)\n            throw new Error(emsg);\n        return new RistrettoPoint(new ExtendedPoint(x, y, _1n, t));\n    }\n    toRawBytes() {\n        let { x, y, z, t } = this.ep;\n        const u1 = mod(mod(z + y) * mod(z - y));\n        const u2 = mod(x * y);\n        const u2sq = mod(u2 * u2);\n        const { value: invsqrt } = invertSqrt(mod(u1 * u2sq));\n        const D1 = mod(invsqrt * u1);\n        const D2 = mod(invsqrt * u2);\n        const zInv = mod(D1 * D2 * t);\n        let D;\n        if (edIsNegative(t * zInv)) {\n            let _x = mod(y * SQRT_M1);\n            let _y = mod(x * SQRT_M1);\n            x = _x;\n            y = _y;\n            D = mod(D1 * INVSQRT_A_MINUS_D);\n        }\n        else {\n            D = D2;\n        }\n        if (edIsNegative(x * zInv))\n            y = mod(-y);\n        let s = mod((z - y) * D);\n        if (edIsNegative(s))\n            s = mod(-s);\n        return numberTo32BytesLE(s);\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toString() {\n        return this.toHex();\n    }\n    equals(other) {\n        assertRstPoint(other);\n        const a = this.ep;\n        const b = other.ep;\n        const one = mod(a.x * b.y) === mod(a.y * b.x);\n        const two = mod(a.y * b.y) === mod(a.x * b.x);\n        return one || two;\n    }\n    add(other) {\n        assertRstPoint(other);\n        return new RistrettoPoint(this.ep.add(other.ep));\n    }\n    subtract(other) {\n        assertRstPoint(other);\n        return new RistrettoPoint(this.ep.subtract(other.ep));\n    }\n    multiply(scalar) {\n        return new RistrettoPoint(this.ep.multiply(scalar));\n    }\n    multiplyUnsafe(scalar) {\n        return new RistrettoPoint(this.ep.multiplyUnsafe(scalar));\n    }\n}\nRistrettoPoint.BASE = new RistrettoPoint(ExtendedPoint.BASE);\nRistrettoPoint.ZERO = new RistrettoPoint(ExtendedPoint.ZERO);\nconst pointPrecomputes = new WeakMap();\nclass Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    static fromHex(hex, strict = true) {\n        const { d, P } = CURVE;\n        hex = ensureBytes(hex, 32);\n        const normed = hex.slice();\n        normed[31] = hex[31] & ~0x80;\n        const y = bytesToNumberLE(normed);\n        if (strict && y >= P)\n            throw new Error('Expected 0 < hex < P');\n        if (!strict && y >= POW_2_256)\n            throw new Error('Expected 0 < hex < 2**256');\n        const y2 = mod(y * y);\n        const u = mod(y2 - _1n);\n        const v = mod(d * y2 + _1n);\n        let { isValid, value: x } = uvRatio(u, v);\n        if (!isValid)\n            throw new Error('Point.fromHex: invalid y coordinate');\n        const isXOdd = (x & _1n) === _1n;\n        const isLastByteOdd = (hex[31] & 0x80) !== 0;\n        if (isLastByteOdd !== isXOdd) {\n            x = mod(-x);\n        }\n        return new Point(x, y);\n    }\n    static async fromPrivateKey(privateKey) {\n        return (await getExtendedPublicKey(privateKey)).point;\n    }\n    toRawBytes() {\n        const bytes = numberTo32BytesLE(this.y);\n        bytes[31] |= this.x & _1n ? 0x80 : 0;\n        return bytes;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toX25519() {\n        const { y } = this;\n        const u = mod((_1n + y) * invert(_1n - y));\n        return numberTo32BytesLE(u);\n    }\n    isTorsionFree() {\n        return ExtendedPoint.fromAffine(this).isTorsionFree();\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(mod(-this.x), this.y);\n    }\n    add(other) {\n        return ExtendedPoint.fromAffine(this).add(ExtendedPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return ExtendedPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _1n);\nclass Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex, 64);\n        const r = Point.fromHex(bytes.slice(0, 32), false);\n        const s = bytesToNumberLE(bytes.slice(32, 64));\n        return new Signature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!(r instanceof Point))\n            throw new Error('Expected Point instance');\n        normalizeScalar(s, CURVE.l, false);\n        return this;\n    }\n    toRawBytes() {\n        const u8 = new Uint8Array(64);\n        u8.set(this.r.toRawBytes());\n        u8.set(numberTo32BytesLE(this.s), 32);\n        return u8;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n}\nexport { ExtendedPoint, RistrettoPoint, Point, Signature };\nfunction concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array list');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction numberTo32BytesBE(num) {\n    const length = 32;\n    const hex = num.toString(16).padStart(length * 2, '0');\n    return hexToBytes(hex);\n}\nfunction numberTo32BytesLE(num) {\n    return numberTo32BytesBE(num).reverse();\n}\nfunction edIsNegative(num) {\n    return (mod(num) & _1n) === _1n;\n}\nfunction bytesToNumberLE(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    return BigInt('0x' + bytesToHex(Uint8Array.from(uint8a).reverse()));\n}\nconst MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nfunction bytes255ToNumberLE(bytes) {\n    return mod(bytesToNumberLE(bytes) & MAX_255B);\n}\nfunction mod(a, b = CURVE.P) {\n    const res = a % b;\n    return res >= _0n ? res : b + res;\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const tmp = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        tmp[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        tmp[i] = mod(acc * tmp[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return tmp;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction pow_2_252_3(x) {\n    const { P } = CURVE;\n    const _5n = BigInt(5);\n    const _10n = BigInt(10);\n    const _20n = BigInt(20);\n    const _40n = BigInt(40);\n    const _80n = BigInt(80);\n    const x2 = (x * x) % P;\n    const b2 = (x2 * x) % P;\n    const b4 = (pow2(b2, _2n) * b2) % P;\n    const b5 = (pow2(b4, _1n) * x) % P;\n    const b10 = (pow2(b5, _5n) * b5) % P;\n    const b20 = (pow2(b10, _10n) * b10) % P;\n    const b40 = (pow2(b20, _20n) * b20) % P;\n    const b80 = (pow2(b40, _40n) * b40) % P;\n    const b160 = (pow2(b80, _80n) * b80) % P;\n    const b240 = (pow2(b160, _80n) * b80) % P;\n    const b250 = (pow2(b240, _10n) * b10) % P;\n    const pow_p_5_8 = (pow2(b250, _2n) * x) % P;\n    return { pow_p_5_8, b2 };\n}\nfunction uvRatio(u, v) {\n    const v3 = mod(v * v * v);\n    const v7 = mod(v3 * v3 * v);\n    const pow = pow_2_252_3(u * v7).pow_p_5_8;\n    let x = mod(u * v3 * pow);\n    const vx2 = mod(v * x * x);\n    const root1 = x;\n    const root2 = mod(x * SQRT_M1);\n    const useRoot1 = vx2 === u;\n    const useRoot2 = vx2 === mod(-u);\n    const noRoot = vx2 === mod(-u * SQRT_M1);\n    if (useRoot1)\n        x = root1;\n    if (useRoot2 || noRoot)\n        x = root2;\n    if (edIsNegative(x))\n        x = mod(-x);\n    return { isValid: useRoot1 || useRoot2, value: x };\n}\nfunction invertSqrt(number) {\n    return uvRatio(_1n, number);\n}\nfunction modlLE(hash) {\n    return mod(bytesToNumberLE(hash), CURVE.l);\n}\nfunction equalBytes(b1, b2) {\n    if (b1.length !== b2.length) {\n        return false;\n    }\n    for (let i = 0; i < b1.length; i++) {\n        if (b1[i] !== b2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction ensureBytes(hex, expectedLength) {\n    const bytes = hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n    if (typeof expectedLength === 'number' && bytes.length !== expectedLength)\n        throw new Error(`Expected ${expectedLength} bytes`);\n    return bytes;\n}\nfunction normalizeScalar(num, max, strict = true) {\n    if (!max)\n        throw new TypeError('Specify max value');\n    if (typeof num === 'number' && Number.isSafeInteger(num))\n        num = BigInt(num);\n    if (typeof num === 'bigint' && num < max) {\n        if (strict) {\n            if (_0n < num)\n                return num;\n        }\n        else {\n            if (_0n <= num)\n                return num;\n        }\n    }\n    throw new TypeError('Expected valid scalar: 0 < scalar < max');\n}\nfunction adjustBytes25519(bytes) {\n    bytes[0] &= 248;\n    bytes[31] &= 127;\n    bytes[31] |= 64;\n    return bytes;\n}\nfunction decodeScalar25519(n) {\n    return bytesToNumberLE(adjustBytes25519(ensureBytes(n, 32)));\n}\nfunction checkPrivateKey(key) {\n    key =\n        typeof key === 'bigint' || typeof key === 'number'\n            ? numberTo32BytesBE(normalizeScalar(key, POW_2_256))\n            : ensureBytes(key);\n    if (key.length !== 32)\n        throw new Error(`Expected 32 bytes`);\n    return key;\n}\nfunction getKeyFromHash(hashed) {\n    const head = adjustBytes25519(hashed.slice(0, 32));\n    const prefix = hashed.slice(32, 64);\n    const scalar = modlLE(head);\n    const point = Point.BASE.multiply(scalar);\n    const pointBytes = point.toRawBytes();\n    return { head, prefix, scalar, point, pointBytes };\n}\nlet _sha512Sync;\nfunction sha512s(...m) {\n    if (typeof _sha512Sync !== 'function')\n        throw new Error('utils.sha512Sync must be set to use sync methods');\n    return _sha512Sync(...m);\n}\nasync function getExtendedPublicKey(key) {\n    return getKeyFromHash(await utils.sha512(checkPrivateKey(key)));\n}\nfunction getExtendedPublicKeySync(key) {\n    return getKeyFromHash(sha512s(checkPrivateKey(key)));\n}\nexport async function getPublicKey(privateKey) {\n    return (await getExtendedPublicKey(privateKey)).pointBytes;\n}\nfunction getPublicKeySync(privateKey) {\n    return getExtendedPublicKeySync(privateKey).pointBytes;\n}\nexport async function sign(message, privateKey) {\n    message = ensureBytes(message);\n    const { prefix, scalar, pointBytes } = await getExtendedPublicKey(privateKey);\n    const r = modlLE(await utils.sha512(prefix, message));\n    const R = Point.BASE.multiply(r);\n    const k = modlLE(await utils.sha512(R.toRawBytes(), pointBytes, message));\n    const s = mod(r + k * scalar, CURVE.l);\n    return new Signature(R, s).toRawBytes();\n}\nfunction signSync(message, privateKey) {\n    message = ensureBytes(message);\n    const { prefix, scalar, pointBytes } = getExtendedPublicKeySync(privateKey);\n    const r = modlLE(sha512s(prefix, message));\n    const R = Point.BASE.multiply(r);\n    const k = modlLE(sha512s(R.toRawBytes(), pointBytes, message));\n    const s = mod(r + k * scalar, CURVE.l);\n    return new Signature(R, s).toRawBytes();\n}\nfunction prepareVerification(sig, message, publicKey) {\n    message = ensureBytes(message);\n    if (!(publicKey instanceof Point))\n        publicKey = Point.fromHex(publicKey, false);\n    const { r, s } = sig instanceof Signature ? sig.assertValidity() : Signature.fromHex(sig);\n    const SB = ExtendedPoint.BASE.multiplyUnsafe(s);\n    return { r, s, SB, pub: publicKey, msg: message };\n}\nfunction finishVerification(publicKey, r, SB, hashed) {\n    const k = modlLE(hashed);\n    const kA = ExtendedPoint.fromAffine(publicKey).multiplyUnsafe(k);\n    const RkA = ExtendedPoint.fromAffine(r).add(kA);\n    return RkA.subtract(SB).multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n}\nexport async function verify(sig, message, publicKey) {\n    const { r, SB, msg, pub } = prepareVerification(sig, message, publicKey);\n    const hashed = await utils.sha512(r.toRawBytes(), pub.toRawBytes(), msg);\n    return finishVerification(pub, r, SB, hashed);\n}\nfunction verifySync(sig, message, publicKey) {\n    const { r, SB, msg, pub } = prepareVerification(sig, message, publicKey);\n    const hashed = sha512s(r.toRawBytes(), pub.toRawBytes(), msg);\n    return finishVerification(pub, r, SB, hashed);\n}\nexport const sync = {\n    getExtendedPublicKey: getExtendedPublicKeySync,\n    getPublicKey: getPublicKeySync,\n    sign: signSync,\n    verify: verifySync,\n};\nexport async function getSharedSecret(privateKey, publicKey) {\n    const { head } = await getExtendedPublicKey(privateKey);\n    const u = Point.fromHex(publicKey).toX25519();\n    return curve25519.scalarMult(head, u);\n}\nPoint.BASE._setWindowSize(8);\nfunction cswap(swap, x_2, x_3) {\n    const dummy = mod(swap * (x_2 - x_3));\n    x_2 = mod(x_2 - dummy);\n    x_3 = mod(x_3 + dummy);\n    return [x_2, x_3];\n}\nfunction montgomeryLadder(pointU, scalar) {\n    const { P } = CURVE;\n    const u = normalizeScalar(pointU, P);\n    const k = normalizeScalar(scalar, P);\n    const a24 = BigInt(121665);\n    const x_1 = u;\n    let x_2 = _1n;\n    let z_2 = _0n;\n    let x_3 = u;\n    let z_3 = _1n;\n    let swap = _0n;\n    let sw;\n    for (let t = BigInt(255 - 1); t >= _0n; t--) {\n        const k_t = (k >> t) & _1n;\n        swap ^= k_t;\n        sw = cswap(swap, x_2, x_3);\n        x_2 = sw[0];\n        x_3 = sw[1];\n        sw = cswap(swap, z_2, z_3);\n        z_2 = sw[0];\n        z_3 = sw[1];\n        swap = k_t;\n        const A = x_2 + z_2;\n        const AA = mod(A * A);\n        const B = x_2 - z_2;\n        const BB = mod(B * B);\n        const E = AA - BB;\n        const C = x_3 + z_3;\n        const D = x_3 - z_3;\n        const DA = mod(D * A);\n        const CB = mod(C * B);\n        const dacb = DA + CB;\n        const da_cb = DA - CB;\n        x_3 = mod(dacb * dacb);\n        z_3 = mod(x_1 * mod(da_cb * da_cb));\n        x_2 = mod(AA * BB);\n        z_2 = mod(E * (AA + mod(a24 * E)));\n    }\n    sw = cswap(swap, x_2, x_3);\n    x_2 = sw[0];\n    x_3 = sw[1];\n    sw = cswap(swap, z_2, z_3);\n    z_2 = sw[0];\n    z_3 = sw[1];\n    const { pow_p_5_8, b2 } = pow_2_252_3(z_2);\n    const xp2 = mod(pow2(pow_p_5_8, BigInt(3)) * b2);\n    return mod(x_2 * xp2);\n}\nfunction encodeUCoordinate(u) {\n    return numberTo32BytesLE(mod(u, CURVE.P));\n}\nfunction decodeUCoordinate(uEnc) {\n    const u = ensureBytes(uEnc, 32);\n    u[31] &= 127;\n    return bytesToNumberLE(u);\n}\nexport const curve25519 = {\n    BASE_POINT_U: '0900000000000000000000000000000000000000000000000000000000000000',\n    scalarMult(privateKey, publicKey) {\n        const u = decodeUCoordinate(publicKey);\n        const p = decodeScalar25519(privateKey);\n        const pu = montgomeryLadder(u, p);\n        if (pu === _0n)\n            throw new Error('Invalid private or public key received');\n        return encodeUCoordinate(pu);\n    },\n    scalarMultBase(privateKey) {\n        return curve25519.scalarMult(privateKey, curve25519.BASE_POINT_U);\n    },\n};\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nexport const utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    getExtendedPublicKey,\n    mod,\n    invert,\n    TORSION_SUBGROUP: [\n        '0100000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n        '0000000000000000000000000000000000000000000000000000000000000080',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n        'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n        '0000000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n    ],\n    hashToPrivateScalar: (hash) => {\n        hash = ensureBytes(hash);\n        if (hash.length < 40 || hash.length > 1024)\n            throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n        return mod(bytesToNumberLE(hash), CURVE.l - _1n) + _1n;\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return new Uint8Array(randomBytes(bytesLength).buffer);\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => {\n        return utils.randomBytes(32);\n    },\n    sha512: async (...messages) => {\n        const message = concatBytes(...messages);\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-512', message.buffer);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            return Uint8Array.from(crypto.node.createHash('sha512').update(message).digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha512 function\");\n        }\n    },\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point.equals(Point.BASE) ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_2n);\n        return cached;\n    },\n    sha512Sync: undefined,\n};\nObject.defineProperties(utils, {\n    sha512Sync: {\n        configurable: false,\n        get() {\n            return _sha512Sync;\n        },\n        set(val) {\n            if (!_sha512Sync)\n                _sha512Sync = val;\n        },\n    },\n});\n","import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = wrapConstructor(() => new SHA256());\n","/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n\nexport type Failure = {\n  value: any\n  key: any\n  type: string\n  refinement: string | undefined\n  message: string\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\n\nexport class StructError extends TypeError {\n  value: any\n  key!: any\n  type!: string\n  refinement!: string | undefined\n  path!: Array<any>\n  branch!: Array<any>\n  failures: () => Array<Failure>;\n  [x: string]: any\n\n  constructor(failure: Failure, failures: () => Generator<Failure>) {\n    let cached: Array<Failure> | undefined\n    const { message, ...rest } = failure\n    const { path } = failure\n    const msg =\n      path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`\n    super(msg)\n    Object.assign(this, rest)\n    this.name = this.constructor.name\n    this.failures = () => {\n      return (cached ??= [failure, ...failures()])\n    }\n  }\n}\n","import { Struct, Infer, Result, Context, Describe } from './struct'\nimport { Failure } from './error'\n\n/**\n * Check if a value is an iterator.\n */\n\nfunction isIterable<T>(x: unknown): x is Iterable<T> {\n  return isObject(x) && typeof x[Symbol.iterator] === 'function'\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isObject(x: unknown): x is object {\n  return typeof x === 'object' && x != null\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isPlainObject(x: unknown): x is { [key: string]: any } {\n  if (Object.prototype.toString.call(x) !== '[object Object]') {\n    return false\n  }\n\n  const prototype = Object.getPrototypeOf(x)\n  return prototype === null || prototype === Object.prototype\n}\n\n/**\n * Return a value as a printable string.\n */\n\nexport function print(value: any): string {\n  return typeof value === 'string' ? JSON.stringify(value) : `${value}`\n}\n\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\n\nexport function shiftIterator<T>(input: Iterator<T>): T | undefined {\n  const { done, value } = input.next()\n  return done ? undefined : value\n}\n\n/**\n * Convert a single validation result to a failure.\n */\n\nexport function toFailure<T, S>(\n  result: string | boolean | Partial<Failure>,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): Failure | undefined {\n  if (result === true) {\n    return\n  } else if (result === false) {\n    result = {}\n  } else if (typeof result === 'string') {\n    result = { message: result }\n  }\n\n  const { path, branch } = context\n  const { type } = struct\n  const {\n    refinement,\n    message = `Expected a value of type \\`${type}\\`${\n      refinement ? ` with refinement \\`${refinement}\\`` : ''\n    }, but received: \\`${print(value)}\\``,\n  } = result\n\n  return {\n    value,\n    type,\n    refinement,\n    key: path[path.length - 1],\n    path,\n    branch,\n    ...result,\n    message,\n  }\n}\n\n/**\n * Convert a validation result to an iterable of failures.\n */\n\nexport function* toFailures<T, S>(\n  result: Result,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): IterableIterator<Failure> {\n  if (!isIterable(result)) {\n    result = [result]\n  }\n\n  for (const r of result) {\n    const failure = toFailure(r, context, struct, value)\n\n    if (failure) {\n      yield failure\n    }\n  }\n}\n\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\n\nexport function* run<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    path?: any[]\n    branch?: any[]\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): IterableIterator<[Failure, undefined] | [undefined, T]> {\n  const { path = [], branch = [value], coerce = false, mask = false } = options\n  const ctx: Context = { path, branch }\n\n  if (coerce) {\n    value = struct.coercer(value, ctx)\n\n    if (\n      mask &&\n      struct.type !== 'type' &&\n      isObject(struct.schema) &&\n      isObject(value) &&\n      !Array.isArray(value)\n    ) {\n      for (const key in value) {\n        if (struct.schema[key] === undefined) {\n          delete value[key]\n        }\n      }\n    }\n  }\n\n  let valid = true\n\n  for (const failure of struct.validator(value, ctx)) {\n    valid = false\n    yield [failure, undefined]\n  }\n\n  for (let [k, v, s] of struct.entries(value, ctx)) {\n    const ts = run(v, s as Struct, {\n      path: k === undefined ? path : [...path, k],\n      branch: k === undefined ? branch : [...branch, v],\n      coerce,\n      mask,\n    })\n\n    for (const t of ts) {\n      if (t[0]) {\n        valid = false\n        yield [t[0], undefined]\n      } else if (coerce) {\n        v = t[1]\n\n        if (k === undefined) {\n          value = v\n        } else if (value instanceof Map) {\n          value.set(k, v)\n        } else if (value instanceof Set) {\n          value.add(v)\n        } else if (isObject(value)) {\n          value[k] = v\n        }\n      }\n    }\n  }\n\n  if (valid) {\n    for (const failure of struct.refiner(value as T, ctx)) {\n      valid = false\n      yield [failure, undefined]\n    }\n  }\n\n  if (valid) {\n    yield [undefined, value as T]\n  }\n}\n\n/**\n * Assign properties from one type to another, overwriting existing.\n */\n\nexport type Assign<T, U> = Simplify<U & Omit<T, keyof U>>\n\n/**\n * A schema for enum structs.\n */\n\nexport type EnumSchema<T extends string | number> = { [K in T]: K }\n\n/**\n * Check if a type is an exact match.\n */\n\nexport type IsMatch<T, G> = T extends G ? (G extends T ? T : never) : never\n\n/**\n * Check if a type is a record type.\n */\n\nexport type IsRecord<T> = T extends object\n  ? string extends keyof T\n    ? T\n    : never\n  : never\n/**\n * Check if a type is a tuple.\n */\n\nexport type IsTuple<T> = T extends [any]\n  ? T\n  : T extends [any, any]\n  ? T\n  : T extends [any, any, any]\n  ? T\n  : T extends [any, any, any, any]\n  ? T\n  : T extends [any, any, any, any, any]\n  ? T\n  : never\n\n/**\n * Check if a type is a union.\n */\n\nexport type IsUnion<T, U extends T = T> = (\n  T extends any ? (U extends T ? false : true) : false\n) extends false\n  ? never\n  : T\n\n/**\n * A schema for object structs.\n */\n\nexport type ObjectSchema = Record<string, Struct<any, any>>\n\n/**\n * Infer a type from an object struct schema.\n */\n\nexport type ObjectType<S extends ObjectSchema> = Simplify<\n  Optionalize<{ [K in keyof S]: Infer<S[K]> }>\n>\n\n/**\n * Omit properties from a type that extend from a specific type.\n */\n\nexport type OmitBy<T, V> = Omit<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Normalize properties of a type that allow `undefined` to make them optional.\n */\n\nexport type Optionalize<S extends object> = OmitBy<S, undefined> &\n  Partial<PickBy<S, undefined>>\n\n/**\n * Transform an object schema type to represent a partial.\n */\n\nexport type PartialObjectSchema<S extends ObjectSchema> = {\n  [K in keyof S]: Struct<Infer<S[K]> | undefined>\n}\n\n/**\n * Pick properties from a type that extend from a specific type.\n */\n\nexport type PickBy<T, V> = Pick<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Simplifies a type definition to its most basic representation.\n */\n\nexport type Simplify<T> = T extends any[] | Date\n  ? T\n  : { [K in keyof T]: T[K] } & {}\n\nexport type If<B extends Boolean, Then, Else> = B extends true ? Then : Else\n\n/**\n * A schema for any type of struct.\n */\n\nexport type StructSchema<T> = [T] extends [string]\n  ? [T] extends [IsMatch<T, string>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [number]\n  ? [T] extends [IsMatch<T, number>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [boolean]\n  ? [T] extends [IsMatch<T, boolean>]\n    ? null\n    : T\n  : T extends\n      | bigint\n      | symbol\n      | undefined\n      | null\n      | Function\n      | Date\n      | Error\n      | RegExp\n      | Map<any, any>\n      | WeakMap<any, any>\n      | Set<any>\n      | WeakSet<any>\n      | Promise<any>\n  ? null\n  : T extends Array<infer E>\n  ? T extends IsTuple<T>\n    ? null\n    : Struct<E>\n  : T extends object\n  ? T extends IsRecord<T>\n    ? null\n    : { [K in keyof T]: Describe<T[K]> }\n  : null\n\n/**\n * A schema for tuple structs.\n */\n\nexport type TupleSchema<T> = { [K in keyof T]: Struct<T[K]> }\n","import { toFailures, shiftIterator, StructSchema, run } from './utils'\nimport { StructError, Failure } from './error'\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\n\nexport class Struct<T = unknown, S = unknown> {\n  readonly TYPE!: T\n  type: string\n  schema: S\n  coercer: (value: unknown, context: Context) => unknown\n  validator: (value: unknown, context: Context) => Iterable<Failure>\n  refiner: (value: T, context: Context) => Iterable<Failure>\n  entries: (\n    value: unknown,\n    context: Context\n  ) => Iterable<[string | number, unknown, Struct<any> | Struct<never>]>\n\n  constructor(props: {\n    type: string\n    schema: S\n    coercer?: Coercer\n    validator?: Validator\n    refiner?: Refiner<T>\n    entries?: Struct<T, S>['entries']\n  }) {\n    const {\n      type,\n      schema,\n      validator,\n      refiner,\n      coercer = (value: unknown) => value,\n      entries = function* () {},\n    } = props\n\n    this.type = type\n    this.schema = schema\n    this.entries = entries\n    this.coercer = coercer\n\n    if (validator) {\n      this.validator = (value, context) => {\n        const result = validator(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.validator = () => []\n    }\n\n    if (refiner) {\n      this.refiner = (value, context) => {\n        const result = refiner(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.refiner = () => []\n    }\n  }\n\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n\n  assert(value: unknown): asserts value is T {\n    return assert(value, this)\n  }\n\n  /**\n   * Create a value with the struct's coercion logic, then validate it.\n   */\n\n  create(value: unknown): T {\n    return create(value, this)\n  }\n\n  /**\n   * Check if a value passes the struct's validation.\n   */\n\n  is(value: unknown): value is T {\n    return is(value, this)\n  }\n\n  /**\n   * Mask a value, coercing and validating it, but returning only the subset of\n   * properties defined by the struct's schema.\n   */\n\n  mask(value: unknown): T {\n    return mask(value, this)\n  }\n\n  /**\n   * Validate a value with the struct's validation logic, returning a tuple\n   * representing the result.\n   *\n   * You may optionally pass `true` for the `withCoercion` argument to coerce\n   * the value before attempting to validate it. If you do, the result will\n   * contain the coerced result when successful.\n   */\n\n  validate(\n    value: unknown,\n    options: {\n      coerce?: boolean\n    } = {}\n  ): [StructError, undefined] | [undefined, T] {\n    return validate(value, this, options)\n  }\n}\n\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\n\nexport function assert<T, S>(\n  value: unknown,\n  struct: Struct<T, S>\n): asserts value is T {\n  const result = validate(value, struct)\n\n  if (result[0]) {\n    throw result[0]\n  }\n}\n\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\n\nexport function create<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\n\nexport function mask<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true, mask: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Check if a value passes a struct.\n */\n\nexport function is<T, S>(value: unknown, struct: Struct<T, S>): value is T {\n  const result = validate(value, struct)\n  return !result[0]\n}\n\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\n\nexport function validate<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): [StructError, undefined] | [undefined, T] {\n  const tuples = run(value, struct, options)\n  const tuple = shiftIterator(tuples)!\n\n  if (tuple[0]) {\n    const error = new StructError(tuple[0], function* () {\n      for (const t of tuples) {\n        if (t[0]) {\n          yield t[0]\n        }\n      }\n    })\n\n    return [error, undefined]\n  } else {\n    const v = tuple[1]\n    return [undefined, v]\n  }\n}\n\n/**\n * A `Context` contains information about the current location of the\n * validation inside the initial input value.\n */\n\nexport type Context = {\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * A type utility to extract the type from a `Struct` class.\n */\n\nexport type Infer<T extends Struct<any, any>> = T['TYPE']\n\n/**\n * A type utility to describe that a struct represents a TypeScript type.\n */\n\nexport type Describe<T> = Struct<T, StructSchema<T>>\n\n/**\n * A `Result` is returned from validation functions.\n */\n\nexport type Result =\n  | boolean\n  | string\n  | Partial<Failure>\n  | Iterable<boolean | string | Partial<Failure>>\n\n/**\n * A `Coercer` takes an unknown value and optionally coerces it.\n */\n\nexport type Coercer<T = unknown> = (value: T, context: Context) => unknown\n\n/**\n * A `Validator` takes an unknown value and validates it.\n */\n\nexport type Validator = (value: unknown, context: Context) => Result\n\n/**\n * A `Refiner` takes a value of a known type and validates it against a further\n * constraint.\n */\n\nexport type Refiner<T> = (value: T, context: Context) => Result\n","import { Struct, Context, Validator } from '../struct'\nimport { object, optional } from './types'\nimport { ObjectSchema, Assign, ObjectType, PartialObjectSchema } from '../utils'\n\n/**\n * Create a new struct that combines the properties properties from multiple\n * object structs.\n *\n * Like JavaScript's `Object.assign` utility.\n */\n\nexport function assign<A extends ObjectSchema, B extends ObjectSchema>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>\n): Struct<ObjectType<Assign<A, B>>, Assign<A, B>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>\n): Struct<ObjectType<Assign<Assign<A, B>, C>>, Assign<Assign<A, B>, C>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>\n): Struct<\n  ObjectType<Assign<Assign<Assign<A, B>, C>, D>>,\n  Assign<Assign<Assign<A, B>, C>, D>\n>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema,\n  E extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>,\n  E: Struct<ObjectType<E>, E>\n): Struct<\n  ObjectType<Assign<Assign<Assign<Assign<A, B>, C>, D>, E>>,\n  Assign<Assign<Assign<Assign<A, B>, C>, D>, E>\n>\nexport function assign(...Structs: Struct<any>[]): any {\n  const schemas = Structs.map((s) => s.schema)\n  const schema = Object.assign({}, ...schemas)\n  return object(schema)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n */\n\nexport function define<T>(name: string, validator: Validator): Struct<T, null> {\n  return new Struct({ type: name, schema: null, validator })\n}\n\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\n\nexport function deprecated<T>(\n  struct: Struct<T>,\n  log: (value: unknown, ctx: Context) => void\n): Struct<T> {\n  return new Struct({\n    ...struct,\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n    validator(value, ctx) {\n      if (value === undefined) {\n        return true\n      } else {\n        log(value, ctx)\n        return struct.validator(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\n\nexport function dynamic<T>(\n  fn: (value: unknown, ctx: Context) => Struct<T, any>\n): Struct<T, null> {\n  return new Struct({\n    type: 'dynamic',\n    schema: null,\n    *entries(value, ctx) {\n      const struct = fn(value, ctx)\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\n\nexport function lazy<T>(fn: () => Struct<T, any>): Struct<T, null> {\n  let struct: Struct<T, any> | undefined\n  return new Struct({\n    type: 'lazy',\n    schema: null,\n    *entries(value, ctx) {\n      struct ??= fn()\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      struct ??= fn()\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      struct ??= fn()\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\n\nexport function omit<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Omit<S, K>>, Omit<S, K>> {\n  const { schema } = struct\n  const subschema: any = { ...schema }\n\n  for (const key of keys) {\n    delete subschema[key]\n  }\n\n  return object(subschema as Omit<S, K>)\n}\n\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\n\nexport function partial<S extends ObjectSchema>(\n  struct: Struct<ObjectType<S>, S> | S\n): Struct<ObjectType<PartialObjectSchema<S>>, PartialObjectSchema<S>> {\n  const schema: any =\n    struct instanceof Struct ? { ...struct.schema } : { ...struct }\n\n  for (const key in schema) {\n    schema[key] = optional(schema[key])\n  }\n\n  return object(schema) as any\n}\n\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\n\nexport function pick<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Pick<S, K>>, Pick<S, K>> {\n  const { schema } = struct\n  const subschema: any = {}\n\n  for (const key of keys) {\n    subschema[key] = schema[key]\n  }\n\n  return object(subschema as Pick<S, K>)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\n\nexport function struct<T>(name: string, validator: Validator): Struct<T, null> {\n  console.warn(\n    'superstruct@0.11 - The `struct` helper has been renamed to `define`.'\n  )\n\n  return define(name, validator)\n}\n","import { Infer, Struct } from '../struct'\nimport { define } from './utilities'\nimport {\n  TupleSchema,\n  ObjectSchema,\n  ObjectType,\n  print,\n  run,\n  isObject,\n} from '../utils'\n\n/**\n * Ensure that any value passes validation.\n */\n\nexport function any(): Struct<any, null> {\n  return define('any', () => true)\n}\n\n/**\n * Ensure that a value is an array and that its elements are of a specific type.\n *\n * Note: If you omit the element struct, the arrays elements will not be\n * iterated at all. This can be helpful for cases where performance is critical,\n * and it is preferred to using `array(any())`.\n */\n\nexport function array<T extends Struct<any>>(Element: T): Struct<Infer<T>[], T>\nexport function array(): Struct<unknown[], undefined>\nexport function array<T extends Struct<any>>(Element?: T): any {\n  return new Struct({\n    type: 'array',\n    schema: Element,\n    *entries(value) {\n      if (Element && Array.isArray(value)) {\n        for (const [i, v] of value.entries()) {\n          yield [i, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return Array.isArray(value) ? value.slice() : value\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array value, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a boolean.\n */\n\nexport function boolean(): Struct<boolean, null> {\n  return define('boolean', (value) => {\n    return typeof value === 'boolean'\n  })\n}\n\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\n\nexport function date(): Struct<Date, null> {\n  return define('date', (value) => {\n    return (\n      (value instanceof Date && !isNaN(value.getTime())) ||\n      `Expected a valid \\`Date\\` object, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is one of a set of potential values.\n *\n * Note: after creating the struct, you can access the definition of the\n * potential values as `struct.schema`.\n */\n\nexport function enums<T extends number>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends string>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends number | string>(values: readonly T[]): any {\n  const schema: any = {}\n  const description = values.map((v) => print(v)).join()\n\n  for (const key of values) {\n    schema[key] = key\n  }\n\n  return new Struct({\n    type: 'enums',\n    schema,\n    validator(value) {\n      return (\n        values.includes(value as any) ||\n        `Expected one of \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a function.\n */\n\nexport function func(): Struct<Function, null> {\n  return define('func', (value) => {\n    return (\n      typeof value === 'function' ||\n      `Expected a function, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an instance of a specific class.\n */\n\nexport function instance<T extends { new (...args: any): any }>(\n  Class: T\n): Struct<InstanceType<T>, null> {\n  return define('instance', (value) => {\n    return (\n      value instanceof Class ||\n      `Expected a \\`${Class.name}\\` instance, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an integer.\n */\n\nexport function integer(): Struct<number, null> {\n  return define('integer', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value) && Number.isInteger(value)) ||\n      `Expected an integer, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value matches all of a set of types.\n */\n\nexport function intersection<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function intersection<A, B>(\n  Structs: TupleSchema<[A, B]>\n): Struct<A & B, null>\nexport function intersection<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A & B & C, null>\nexport function intersection<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A & B & C & D, null>\nexport function intersection<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A & B & C & D & E, null>\nexport function intersection<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A & B & C & D & E & F, null>\nexport function intersection<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A & B & C & D & E & F & G, null>\nexport function intersection<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A & B & C & D & E & F & G & H, null>\nexport function intersection<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A & B & C & D & E & F & G & H & I, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A & B & C & D & E & F & G & H & I & J, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q,\n  null\n>\nexport function intersection(Structs: Array<Struct<any, any>>): any {\n  return new Struct({\n    type: 'intersection',\n    schema: null,\n    *entries(value, ctx) {\n      for (const S of Structs) {\n        yield* S.entries(value, ctx)\n      }\n    },\n    *validator(value, ctx) {\n      for (const S of Structs) {\n        yield* S.validator(value, ctx)\n      }\n    },\n    *refiner(value, ctx) {\n      for (const S of Structs) {\n        yield* S.refiner(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Ensure that a value is an exact value, using `===` for comparison.\n */\n\nexport function literal<T extends boolean>(constant: T): Struct<T, T>\nexport function literal<T extends number>(constant: T): Struct<T, T>\nexport function literal<T extends string>(constant: T): Struct<T, T>\nexport function literal<T>(constant: T): Struct<T, null>\nexport function literal<T>(constant: T): any {\n  const description = print(constant)\n  const t = typeof constant\n  return new Struct({\n    type: 'literal',\n    schema:\n      t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n    validator(value) {\n      return (\n        value === constant ||\n        `Expected the literal \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `Map` object, and that its keys and values are of\n * specific types.\n */\n\nexport function map(): Struct<Map<unknown, unknown>, null>\nexport function map<K, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Map<K, V>, null>\nexport function map<K, V>(Key?: Struct<K>, Value?: Struct<V>): any {\n  return new Struct({\n    type: 'map',\n    schema: null,\n    *entries(value) {\n      if (Key && Value && value instanceof Map) {\n        for (const [k, v] of value.entries()) {\n          yield [k as string, k, Key]\n          yield [k as string, v, Value]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Map ? new Map(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Map ||\n        `Expected a \\`Map\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that no value ever passes validation.\n */\n\nexport function never(): Struct<never, null> {\n  return define('never', () => false)\n}\n\n/**\n * Augment an existing struct to allow `null` values.\n */\n\nexport function nullable<T, S>(struct: Struct<T, S>): Struct<T | null, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) => value === null || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === null || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is a number.\n */\n\nexport function number(): Struct<number, null> {\n  return define('number', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value)) ||\n      `Expected a number, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an object, that is has a known set of properties,\n * and that its properties are of specific types.\n *\n * Note: Unrecognized properties will fail validation.\n */\n\nexport function object(): Struct<Record<string, unknown>, null>\nexport function object<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S>\nexport function object<S extends ObjectSchema>(schema?: S): any {\n  const knowns = schema ? Object.keys(schema) : []\n  const Never = never()\n  return new Struct({\n    type: 'object',\n    schema: schema ? schema : null,\n    *entries(value) {\n      if (schema && isObject(value)) {\n        const unknowns = new Set(Object.keys(value))\n\n        for (const key of knowns) {\n          unknowns.delete(key)\n          yield [key, value[key], schema[key]]\n        }\n\n        for (const key of unknowns) {\n          yield [key, value[key], Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n    coercer(value) {\n      return isObject(value) ? { ...value } : value\n    },\n  })\n}\n\n/**\n * Augment a struct to allow `undefined` values.\n */\n\nexport function optional<T, S>(struct: Struct<T, S>): Struct<T | undefined, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) =>\n      value === undefined || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\n\nexport function record<K extends string, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Record<K, V>, null> {\n  return new Struct({\n    type: 'record',\n    schema: null,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k in value) {\n          const v = value[k]\n          yield [k, k, Key]\n          yield [k, v, Value]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\n\nexport function regexp(): Struct<RegExp, null> {\n  return define('regexp', (value) => {\n    return value instanceof RegExp\n  })\n}\n\n/**\n * Ensure that a value is a `Set` object, and that its elements are of a\n * specific type.\n */\n\nexport function set(): Struct<Set<unknown>, null>\nexport function set<T>(Element: Struct<T>): Struct<Set<T>, null>\nexport function set<T>(Element?: Struct<T>): any {\n  return new Struct({\n    type: 'set',\n    schema: null,\n    *entries(value) {\n      if (Element && value instanceof Set) {\n        for (const v of value) {\n          yield [v as string, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Set ? new Set(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Set ||\n        `Expected a \\`Set\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a string.\n */\n\nexport function string(): Struct<string, null> {\n  return define('string', (value) => {\n    return (\n      typeof value === 'string' ||\n      `Expected a string, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is a tuple of a specific length, and that each of its\n * elements is of a specific type.\n */\n\nexport function tuple<A>(Structs: TupleSchema<[A]>): Struct<[A], null>\nexport function tuple<A, B>(Structs: TupleSchema<[A, B]>): Struct<[A, B], null>\nexport function tuple<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<[A, B, C], null>\nexport function tuple<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<[A, B, C, D], null>\nexport function tuple<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<[A, B, C, D, E], null>\nexport function tuple<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<[A, B, C, D, E, F], null>\nexport function tuple<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<[A, B, C, D, E, F, G], null>\nexport function tuple<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<[A, B, C, D, E, F, G, H], null>\nexport function tuple<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<[A, B, C, D, E, F, G, H, I], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<[A, B, C, D, E, F, G, H, I, J], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q], null>\nexport function tuple(Elements: Struct<any>[]): any {\n  const Never = never()\n\n  return new Struct({\n    type: 'tuple',\n    schema: null,\n    *entries(value) {\n      if (Array.isArray(value)) {\n        const length = Math.max(Elements.length, value.length)\n\n        for (let i = 0; i < length; i++) {\n          yield [i, value[i], Elements[i] || Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\n\nexport function type<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S> {\n  const keys = Object.keys(schema)\n  return new Struct({\n    type: 'type',\n    schema,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k of keys) {\n          yield [k, value[k], schema[k]]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value matches one of a set of types.\n */\n\nexport function union<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function union<A, B>(Structs: TupleSchema<[A, B]>): Struct<A | B, null>\nexport function union<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A | B | C, null>\nexport function union<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A | B | C | D, null>\nexport function union<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A | B | C | D | E, null>\nexport function union<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A | B | C | D | E | F, null>\nexport function union<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A | B | C | D | E | F | G, null>\nexport function union<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A | B | C | D | E | F | G | H, null>\nexport function union<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A | B | C | D | E | F | G | H | I, null>\nexport function union<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A | B | C | D | E | F | G | H | I | J, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q,\n  null\n>\nexport function union(Structs: Struct<any>[]): any {\n  const description = Structs.map((s) => s.type).join(' | ')\n  return new Struct({\n    type: 'union',\n    schema: null,\n    validator(value, ctx) {\n      const failures = []\n\n      for (const S of Structs) {\n        const [...tuples] = run(value, S, ctx)\n        const [first] = tuples\n\n        if (!first[0]) {\n          return []\n        } else {\n          for (const [failure] of tuples) {\n            if (failure) {\n              failures.push(failure)\n            }\n          }\n        }\n      }\n\n      return [\n        `Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(\n          value\n        )}`,\n        ...failures,\n      ]\n    },\n  })\n}\n\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\n\nexport function unknown(): Struct<unknown, null> {\n  return define('unknown', () => true)\n}\n","import { Struct, is, Coercer } from '../struct'\nimport { isPlainObject } from '../utils'\nimport { string, unknown } from './types'\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function coerce<T, S, C>(\n  struct: Struct<T, S>,\n  condition: Struct<C, any>,\n  coercer: Coercer<C>\n): Struct<T, S> {\n  return new Struct({\n    ...struct,\n    coercer: (value, ctx) => {\n      return is(value, condition)\n        ? struct.coercer(coercer(value, ctx), ctx)\n        : struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function defaulted<T, S>(\n  struct: Struct<T, S>,\n  fallback: any,\n  options: {\n    strict?: boolean\n  } = {}\n): Struct<T, S> {\n  return coerce(struct, unknown(), (x) => {\n    const f = typeof fallback === 'function' ? fallback() : fallback\n\n    if (x === undefined) {\n      return f\n    }\n\n    if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n      const ret = { ...x }\n      let changed = false\n\n      for (const key in f) {\n        if (ret[key] === undefined) {\n          ret[key] = f[key]\n          changed = true\n        }\n      }\n\n      if (changed) {\n        return ret\n      }\n    }\n\n    return x\n  })\n}\n\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function trimmed<T, S>(struct: Struct<T, S>): Struct<T, S> {\n  return coerce(struct, string(), (x) => x.trim())\n}\n","import assert from './_assert.js';\nimport u64 from './_u64.js';\nimport { Hash, u32, toBytes, wrapConstructor, wrapConstructorWithOpts, } from './utils.js';\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _7n = BigInt(7);\nconst _256n = BigInt(256);\nconst _0x71n = BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = u64.split(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => s > 32 ? u64.rotlBH(h, l, s) : u64.rotlSH(h, l, s);\nconst rotlL = (h, l, s) => s > 32 ? u64.rotlBL(h, l, s) : u64.rotlSL(h, l, s);\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\nexport class Keccak extends Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        assert.number(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        if (0 >= this.blockLen || this.blockLen >= 200)\n            throw new Error('Sha3 supports only keccak-f1600 function');\n        this.state = new Uint8Array(200);\n        this.state32 = u32(this.state);\n    }\n    keccak() {\n        keccakP(this.state32, this.rounds);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        assert.exists(this);\n        const { blockLen, state } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        assert.exists(this, false);\n        assert.bytes(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        assert.number(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        assert.output(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nconst gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\nexport const sha3_224 = gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport const sha3_256 = gen(0x06, 136, 256 / 8);\nexport const sha3_384 = gen(0x06, 104, 384 / 8);\nexport const sha3_512 = gen(0x06, 72, 512 / 8);\nexport const keccak_224 = gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport const keccak_256 = gen(0x01, 136, 256 / 8);\nexport const keccak_384 = gen(0x01, 104, 384 / 8);\nexport const keccak_512 = gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => wrapConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\nexport const shake128 = genShake(0x1f, 168, 128 / 8);\nexport const shake256 = genShake(0x1f, 136, 256 / 8);\n","import assert from './_assert.js';\nimport { Hash, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nclass HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        assert.hash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new TypeError('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        assert.exists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        assert.exists(this);\n        assert.bytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n","/*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _3n = BigInt(3);\nconst _8n = BigInt(8);\nconst CURVE = Object.freeze({\n    a: _0n,\n    b: BigInt(7),\n    P: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\n    n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\n    h: _1n,\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n});\nexport { CURVE };\nfunction weistrass(x) {\n    const { a, b } = CURVE;\n    const x2 = mod(x * x);\n    const x3 = mod(x2 * x);\n    return mod(x3 + a * x + b);\n}\nconst USE_ENDOMORPHISM = CURVE.a === _0n;\nclass ShaError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\nclass JacobianPoint {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('JacobianPoint#fromAffine: expected Point');\n        }\n        return new JacobianPoint(p.x, p.y, _1n);\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);\n    }\n    equals(other) {\n        if (!(other instanceof JacobianPoint))\n            throw new TypeError('JacobianPoint expected');\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        return U1 === U2 && S1 === S2;\n    }\n    negate() {\n        return new JacobianPoint(this.x, mod(-this.y), this.z);\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(B * B);\n        const x1b = X1 + B;\n        const D = mod(_2n * (mod(x1b * x1b) - A - C));\n        const E = mod(_3n * A);\n        const F = mod(E * E);\n        const X3 = mod(F - _2n * D);\n        const Y3 = mod(E * (D - X3) - _8n * C);\n        const Z3 = mod(_2n * Y1 * Z1);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    add(other) {\n        if (!(other instanceof JacobianPoint))\n            throw new TypeError('JacobianPoint expected');\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        if (X2 === _0n || Y2 === _0n)\n            return this;\n        if (X1 === _0n || Y1 === _0n)\n            return other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        const H = mod(U2 - U1);\n        const r = mod(S2 - S1);\n        if (H === _0n) {\n            if (r === _0n) {\n                return this.double();\n            }\n            else {\n                return JacobianPoint.ZERO;\n            }\n        }\n        const HH = mod(H * H);\n        const HHH = mod(H * HH);\n        const V = mod(U1 * HH);\n        const X3 = mod(r * r - HHH - _2n * V);\n        const Y3 = mod(r * (V - X3) - S1 * HHH);\n        const Z3 = mod(Z1 * Z2 * H);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiplyUnsafe(scalar) {\n        const P0 = JacobianPoint.ZERO;\n        if (typeof scalar === 'bigint' && scalar === _0n)\n            return P0;\n        let n = normalizeScalar(scalar);\n        if (n === _1n)\n            return this;\n        if (!USE_ENDOMORPHISM) {\n            let p = P0;\n            let d = this;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        }\n        let { k1neg, k1, k2neg, k2 } = splitScalarEndo(n);\n        let k1p = P0;\n        let k2p = P0;\n        let d = this;\n        while (k1 > _0n || k2 > _0n) {\n            if (k1 & _1n)\n                k1p = k1p.add(d);\n            if (k2 & _1n)\n                k2p = k2p.add(d);\n            d = d.double();\n            k1 >>= _1n;\n            k2 >>= _1n;\n        }\n        if (k1neg)\n            k1p = k1p.negate();\n        if (k2neg)\n            k2p = k2p.negate();\n        k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\n        return k1p.add(k2p);\n    }\n    precomputeWindow(W) {\n        const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(JacobianPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = JacobianPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = JacobianPoint.ZERO;\n        let f = JacobianPoint.ZERO;\n        const windows = 1 + (USE_ENDOMORPHISM ? 128 / W : 256 / W);\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            if (wbits === 0) {\n                let pr = precomputes[offset];\n                if (window % 2)\n                    pr = pr.negate();\n                f = f.add(pr);\n            }\n            else {\n                let cached = precomputes[offset + Math.abs(wbits) - 1];\n                if (wbits < 0)\n                    cached = cached.negate();\n                p = p.add(cached);\n            }\n        }\n        return { p, f };\n    }\n    multiply(scalar, affinePoint) {\n        let n = normalizeScalar(scalar);\n        let point;\n        let fake;\n        if (USE_ENDOMORPHISM) {\n            const { k1neg, k1, k2neg, k2 } = splitScalarEndo(n);\n            let { p: k1p, f: f1p } = this.wNAF(k1, affinePoint);\n            let { p: k2p, f: f2p } = this.wNAF(k2, affinePoint);\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\n            point = k1p.add(k2p);\n            fake = f1p.add(f2p);\n        }\n        else {\n            const { p, f } = this.wNAF(n, affinePoint);\n            point = p;\n            fake = f;\n        }\n        return JacobianPoint.normalizeZ([point, fake])[0];\n    }\n    toAffine(invZ = invert(this.z)) {\n        const { x, y, z } = this;\n        const iz1 = invZ;\n        const iz2 = mod(iz1 * iz1);\n        const iz3 = mod(iz2 * iz1);\n        const ax = mod(x * iz2);\n        const ay = mod(y * iz3);\n        const zz = mod(z * iz1);\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n}\nJacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n);\nJacobianPoint.ZERO = new JacobianPoint(_0n, _1n, _0n);\nconst pointPrecomputes = new WeakMap();\nexport class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    hasEvenY() {\n        return this.y % _2n === _0n;\n    }\n    static fromCompressedHex(bytes) {\n        const isShort = bytes.length === 32;\n        const x = bytesToNumber(isShort ? bytes : bytes.subarray(1));\n        if (!isValidFieldElement(x))\n            throw new Error('Point is not on curve');\n        const y2 = weistrass(x);\n        let y = sqrtMod(y2);\n        const isYOdd = (y & _1n) === _1n;\n        if (isShort) {\n            if (isYOdd)\n                y = mod(-y);\n        }\n        else {\n            const isFirstByteOdd = (bytes[0] & 1) === 1;\n            if (isFirstByteOdd !== isYOdd)\n                y = mod(-y);\n        }\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromUncompressedHex(bytes) {\n        const x = bytesToNumber(bytes.subarray(1, 33));\n        const y = bytesToNumber(bytes.subarray(33, 65));\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        const len = bytes.length;\n        const header = bytes[0];\n        if (len === 32 || (len === 33 && (header === 0x02 || header === 0x03))) {\n            return this.fromCompressedHex(bytes);\n        }\n        if (len === 65 && header === 0x04)\n            return this.fromUncompressedHex(bytes);\n        throw new Error(`Point.fromHex: received invalid point. Expected 32-33 compressed bytes or 65 uncompressed bytes, not ${len}`);\n    }\n    static fromPrivateKey(privateKey) {\n        return Point.BASE.multiply(normalizePrivateKey(privateKey));\n    }\n    static fromSignature(msgHash, signature, recovery) {\n        msgHash = ensureBytes(msgHash);\n        const h = truncateHash(msgHash);\n        const { r, s } = normalizeSignature(signature);\n        if (recovery !== 0 && recovery !== 1) {\n            throw new Error('Cannot recover signature: invalid recovery bit');\n        }\n        const prefix = recovery & 1 ? '03' : '02';\n        const R = Point.fromHex(prefix + numTo32bStr(r));\n        const { n } = CURVE;\n        const rinv = invert(r, n);\n        const u1 = mod(-h * rinv, n);\n        const u2 = mod(s * rinv, n);\n        const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);\n        if (!Q)\n            throw new Error('Cannot recover signature: point at infinify');\n        Q.assertValidity();\n        return Q;\n    }\n    toRawBytes(isCompressed = false) {\n        return hexToBytes(this.toHex(isCompressed));\n    }\n    toHex(isCompressed = false) {\n        const x = numTo32bStr(this.x);\n        if (isCompressed) {\n            const prefix = this.hasEvenY() ? '02' : '03';\n            return `${prefix}${x}`;\n        }\n        else {\n            return `04${x}${numTo32bStr(this.y)}`;\n        }\n    }\n    toHexX() {\n        return this.toHex(true).slice(2);\n    }\n    toRawX() {\n        return this.toRawBytes(true).slice(1);\n    }\n    assertValidity() {\n        const msg = 'Point is not on elliptic curve';\n        const { x, y } = this;\n        if (!isValidFieldElement(x) || !isValidFieldElement(y))\n            throw new Error(msg);\n        const left = mod(y * y);\n        const right = weistrass(x);\n        if (mod(left - right) !== _0n)\n            throw new Error(msg);\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(this.x, mod(-this.y));\n    }\n    double() {\n        return JacobianPoint.fromAffine(this).double().toAffine();\n    }\n    add(other) {\n        return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n    multiplyAndAddUnsafe(Q, a, b) {\n        const P = JacobianPoint.fromAffine(this);\n        const aP = a === _0n || a === _1n || this !== Point.BASE ? P.multiplyUnsafe(a) : P.multiply(a);\n        const bQ = JacobianPoint.fromAffine(Q).multiplyUnsafe(b);\n        const sum = aP.add(bQ);\n        return sum.equals(JacobianPoint.ZERO) ? undefined : sum.toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _0n);\nfunction sliceDER(s) {\n    return Number.parseInt(s[0], 16) >= 8 ? '00' + s : s;\n}\nfunction parseDERInt(data) {\n    if (data.length < 2 || data[0] !== 0x02) {\n        throw new Error(`Invalid signature integer tag: ${bytesToHex(data)}`);\n    }\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) {\n        throw new Error(`Invalid signature integer: wrong length`);\n    }\n    if (res[0] === 0x00 && res[1] <= 0x7f) {\n        throw new Error('Invalid signature integer: trailing length');\n    }\n    return { data: bytesToNumber(res), left: data.subarray(len + 2) };\n}\nfunction parseDERSignature(data) {\n    if (data.length < 2 || data[0] != 0x30) {\n        throw new Error(`Invalid signature tag: ${bytesToHex(data)}`);\n    }\n    if (data[1] !== data.length - 2) {\n        throw new Error('Invalid signature: incorrect length');\n    }\n    const { data: r, left: sBytes } = parseDERInt(data.subarray(2));\n    const { data: s, left: rBytesLeft } = parseDERInt(sBytes);\n    if (rBytesLeft.length) {\n        throw new Error(`Invalid signature: left bytes after parsing: ${bytesToHex(rBytesLeft)}`);\n    }\n    return { r, s };\n}\nexport class Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromCompact(hex) {\n        const arr = hex instanceof Uint8Array;\n        const name = 'Signature.fromCompact';\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`${name}: Expected string or Uint8Array`);\n        const str = arr ? bytesToHex(hex) : hex;\n        if (str.length !== 128)\n            throw new Error(`${name}: Expected 64-byte hex`);\n        return new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));\n    }\n    static fromDER(hex) {\n        const arr = hex instanceof Uint8Array;\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);\n        const { r, s } = parseDERSignature(arr ? hex : hexToBytes(hex));\n        return new Signature(r, s);\n    }\n    static fromHex(hex) {\n        return this.fromDER(hex);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isWithinCurveOrder(r))\n            throw new Error('Invalid Signature: r must be 0 < r < n');\n        if (!isWithinCurveOrder(s))\n            throw new Error('Invalid Signature: s must be 0 < s < n');\n    }\n    hasHighS() {\n        const HALF = CURVE.n >> _1n;\n        return this.s > HALF;\n    }\n    normalizeS() {\n        return this.hasHighS() ? new Signature(this.r, CURVE.n - this.s) : this;\n    }\n    toDERRawBytes(isCompressed = false) {\n        return hexToBytes(this.toDERHex(isCompressed));\n    }\n    toDERHex(isCompressed = false) {\n        const sHex = sliceDER(numberToHexUnpadded(this.s));\n        if (isCompressed)\n            return sHex;\n        const rHex = sliceDER(numberToHexUnpadded(this.r));\n        const rLen = numberToHexUnpadded(rHex.length / 2);\n        const sLen = numberToHexUnpadded(sHex.length / 2);\n        const length = numberToHexUnpadded(rHex.length / 2 + sHex.length / 2 + 4);\n        return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;\n    }\n    toRawBytes() {\n        return this.toDERRawBytes();\n    }\n    toHex() {\n        return this.toDERHex();\n    }\n    toCompactRawBytes() {\n        return hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n}\nfunction concatBytes(...arrays) {\n    if (!arrays.every((b) => b instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nfunction numTo32bStr(num) {\n    if (typeof num !== 'bigint')\n        throw new Error('Expected bigint');\n    if (!(_0n <= num && num < POW_2_256))\n        throw new Error('Expected number < 2^256');\n    return num.toString(16).padStart(64, '0');\n}\nfunction numTo32b(num) {\n    const b = hexToBytes(numTo32bStr(num));\n    if (b.length !== 32)\n        throw new Error('Error: expected 32 bytes');\n    return b;\n}\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToNumber: expected string, got ' + typeof hex);\n    }\n    return BigInt(`0x${hex}`);\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex' + hex.length);\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction bytesToNumber(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nfunction ensureBytes(hex) {\n    return hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n}\nfunction normalizeScalar(num) {\n    if (typeof num === 'number' && Number.isSafeInteger(num) && num > 0)\n        return BigInt(num);\n    if (typeof num === 'bigint' && isWithinCurveOrder(num))\n        return num;\n    throw new TypeError('Expected valid private scalar: 0 < scalar < curve.n');\n}\nfunction mod(a, b = CURVE.P) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction sqrtMod(x) {\n    const { P } = CURVE;\n    const _6n = BigInt(6);\n    const _11n = BigInt(11);\n    const _22n = BigInt(22);\n    const _23n = BigInt(23);\n    const _44n = BigInt(44);\n    const _88n = BigInt(88);\n    const b2 = (x * x * x) % P;\n    const b3 = (b2 * b2 * x) % P;\n    const b6 = (pow2(b3, _3n) * b3) % P;\n    const b9 = (pow2(b6, _3n) * b3) % P;\n    const b11 = (pow2(b9, _2n) * b2) % P;\n    const b22 = (pow2(b11, _11n) * b11) % P;\n    const b44 = (pow2(b22, _22n) * b22) % P;\n    const b88 = (pow2(b44, _44n) * b44) % P;\n    const b176 = (pow2(b88, _88n) * b88) % P;\n    const b220 = (pow2(b176, _44n) * b44) % P;\n    const b223 = (pow2(b220, _3n) * b3) % P;\n    const t1 = (pow2(b223, _23n) * b22) % P;\n    const t2 = (pow2(t1, _6n) * b2) % P;\n    return pow2(t2, _2n);\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const scratch = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = mod(acc * scratch[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return scratch;\n}\nconst divNearest = (a, b) => (a + b / _2n) / b;\nconst ENDO = {\n    a1: BigInt('0x3086d221a7d46bcde86c90e49284eb15'),\n    b1: -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3'),\n    a2: BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8'),\n    b2: BigInt('0x3086d221a7d46bcde86c90e49284eb15'),\n    POW_2_128: BigInt('0x100000000000000000000000000000000'),\n};\nfunction splitScalarEndo(k) {\n    const { n } = CURVE;\n    const { a1, b1, a2, b2, POW_2_128 } = ENDO;\n    const c1 = divNearest(b2 * k, n);\n    const c2 = divNearest(-b1 * k, n);\n    let k1 = mod(k - c1 * a1 - c2 * a2, n);\n    let k2 = mod(-c1 * b1 - c2 * b2, n);\n    const k1neg = k1 > POW_2_128;\n    const k2neg = k2 > POW_2_128;\n    if (k1neg)\n        k1 = n - k1;\n    if (k2neg)\n        k2 = n - k2;\n    if (k1 > POW_2_128 || k2 > POW_2_128) {\n        throw new Error('splitScalarEndo: Endomorphism failed, k=' + k);\n    }\n    return { k1neg, k1, k2neg, k2 };\n}\nfunction truncateHash(hash) {\n    const { n } = CURVE;\n    const byteLength = hash.length;\n    const delta = byteLength * 8 - 256;\n    let h = bytesToNumber(hash);\n    if (delta > 0)\n        h = h >> BigInt(delta);\n    if (h >= n)\n        h -= n;\n    return h;\n}\nlet _sha256Sync;\nlet _hmacSha256Sync;\nclass HmacDrbg {\n    constructor() {\n        this.v = new Uint8Array(32).fill(1);\n        this.k = new Uint8Array(32).fill(0);\n        this.counter = 0;\n    }\n    hmac(...values) {\n        return utils.hmacSha256(this.k, ...values);\n    }\n    hmacSync(...values) {\n        return _hmacSha256Sync(this.k, ...values);\n    }\n    checkSync() {\n        if (typeof _hmacSha256Sync !== 'function')\n            throw new ShaError('hmacSha256Sync needs to be set');\n    }\n    incr() {\n        if (this.counter >= 1000)\n            throw new Error('Tried 1,000 k values for sign(), all were invalid');\n        this.counter += 1;\n    }\n    async reseed(seed = new Uint8Array()) {\n        this.k = await this.hmac(this.v, Uint8Array.from([0x00]), seed);\n        this.v = await this.hmac(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = await this.hmac(this.v, Uint8Array.from([0x01]), seed);\n        this.v = await this.hmac(this.v);\n    }\n    reseedSync(seed = new Uint8Array()) {\n        this.checkSync();\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x00]), seed);\n        this.v = this.hmacSync(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x01]), seed);\n        this.v = this.hmacSync(this.v);\n    }\n    async generate() {\n        this.incr();\n        this.v = await this.hmac(this.v);\n        return this.v;\n    }\n    generateSync() {\n        this.checkSync();\n        this.incr();\n        this.v = this.hmacSync(this.v);\n        return this.v;\n    }\n}\nfunction isWithinCurveOrder(num) {\n    return _0n < num && num < CURVE.n;\n}\nfunction isValidFieldElement(num) {\n    return _0n < num && num < CURVE.P;\n}\nfunction kmdToSig(kBytes, m, d) {\n    const k = bytesToNumber(kBytes);\n    if (!isWithinCurveOrder(k))\n        return;\n    const { n } = CURVE;\n    const q = Point.BASE.multiply(k);\n    const r = mod(q.x, n);\n    if (r === _0n)\n        return;\n    const s = mod(invert(k, n) * mod(m + d * r, n), n);\n    if (s === _0n)\n        return;\n    const sig = new Signature(r, s);\n    const recovery = (q.x === sig.r ? 0 : 2) | Number(q.y & _1n);\n    return { sig, recovery };\n}\nfunction normalizePrivateKey(key) {\n    let num;\n    if (typeof key === 'bigint') {\n        num = key;\n    }\n    else if (typeof key === 'number' && Number.isSafeInteger(key) && key > 0) {\n        num = BigInt(key);\n    }\n    else if (typeof key === 'string') {\n        if (key.length !== 64)\n            throw new Error('Expected 32 bytes of private key');\n        num = hexToNumber(key);\n    }\n    else if (key instanceof Uint8Array) {\n        if (key.length !== 32)\n            throw new Error('Expected 32 bytes of private key');\n        num = bytesToNumber(key);\n    }\n    else {\n        throw new TypeError('Expected valid private key');\n    }\n    if (!isWithinCurveOrder(num))\n        throw new Error('Expected private key: 0 < key < n');\n    return num;\n}\nfunction normalizePublicKey(publicKey) {\n    if (publicKey instanceof Point) {\n        publicKey.assertValidity();\n        return publicKey;\n    }\n    else {\n        return Point.fromHex(publicKey);\n    }\n}\nfunction normalizeSignature(signature) {\n    if (signature instanceof Signature) {\n        signature.assertValidity();\n        return signature;\n    }\n    try {\n        return Signature.fromDER(signature);\n    }\n    catch (error) {\n        return Signature.fromCompact(signature);\n    }\n}\nexport function getPublicKey(privateKey, isCompressed = false) {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n}\nexport function recoverPublicKey(msgHash, signature, recovery, isCompressed = false) {\n    return Point.fromSignature(msgHash, signature, recovery).toRawBytes(isCompressed);\n}\nfunction isProbPub(item) {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && item.length;\n    if (arr)\n        return len === 33 || len === 65;\n    if (str)\n        return len === 66 || len === 130;\n    if (item instanceof Point)\n        return true;\n    return false;\n}\nexport function getSharedSecret(privateA, publicB, isCompressed = false) {\n    if (isProbPub(privateA))\n        throw new TypeError('getSharedSecret: first arg must be private key');\n    if (!isProbPub(publicB))\n        throw new TypeError('getSharedSecret: second arg must be public key');\n    const b = normalizePublicKey(publicB);\n    b.assertValidity();\n    return b.multiply(normalizePrivateKey(privateA)).toRawBytes(isCompressed);\n}\nfunction bits2int(bytes) {\n    const slice = bytes.length > 32 ? bytes.slice(0, 32) : bytes;\n    return bytesToNumber(slice);\n}\nfunction bits2octets(bytes) {\n    const z1 = bits2int(bytes);\n    const z2 = mod(z1, CURVE.n);\n    return int2octets(z2 < _0n ? z1 : z2);\n}\nfunction int2octets(num) {\n    return numTo32b(num);\n}\nfunction initSigArgs(msgHash, privateKey, extraEntropy) {\n    if (msgHash == null)\n        throw new Error(`sign: expected valid message hash, not \"${msgHash}\"`);\n    const h1 = ensureBytes(msgHash);\n    const d = normalizePrivateKey(privateKey);\n    const seedArgs = [int2octets(d), bits2octets(h1)];\n    if (extraEntropy != null) {\n        if (extraEntropy === true)\n            extraEntropy = utils.randomBytes(32);\n        const e = ensureBytes(extraEntropy);\n        if (e.length !== 32)\n            throw new Error('sign: Expected 32 bytes of extra data');\n        seedArgs.push(e);\n    }\n    const seed = concatBytes(...seedArgs);\n    const m = bits2int(h1);\n    return { seed, m, d };\n}\nfunction finalizeSig(recSig, opts) {\n    let { sig, recovery } = recSig;\n    const { canonical, der, recovered } = Object.assign({ canonical: true, der: true }, opts);\n    if (canonical && sig.hasHighS()) {\n        sig = sig.normalizeS();\n        recovery ^= 1;\n    }\n    const hashed = der ? sig.toDERRawBytes() : sig.toCompactRawBytes();\n    return recovered ? [hashed, recovery] : hashed;\n}\nasync function sign(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    let sig;\n    const drbg = new HmacDrbg();\n    await drbg.reseed(seed);\n    while (!(sig = kmdToSig(await drbg.generate(), m, d)))\n        await drbg.reseed();\n    return finalizeSig(sig, opts);\n}\nfunction signSync(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    let sig;\n    const drbg = new HmacDrbg();\n    drbg.reseedSync(seed);\n    while (!(sig = kmdToSig(drbg.generateSync(), m, d)))\n        drbg.reseedSync();\n    return finalizeSig(sig, opts);\n}\nexport { sign, signSync };\nconst vopts = { strict: true };\nexport function verify(signature, msgHash, publicKey, opts = vopts) {\n    let sig;\n    try {\n        sig = normalizeSignature(signature);\n        msgHash = ensureBytes(msgHash);\n    }\n    catch (error) {\n        return false;\n    }\n    const { r, s } = sig;\n    if (opts.strict && sig.hasHighS())\n        return false;\n    const h = truncateHash(msgHash);\n    let P;\n    try {\n        P = normalizePublicKey(publicKey);\n    }\n    catch (error) {\n        return false;\n    }\n    const { n } = CURVE;\n    const sinv = invert(s, n);\n    const u1 = mod(h * sinv, n);\n    const u2 = mod(r * sinv, n);\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2);\n    if (!R)\n        return false;\n    const v = mod(R.x, n);\n    return v === r;\n}\nfunction schnorrChallengeFinalize(ch) {\n    return mod(bytesToNumber(ch), CURVE.n);\n}\nclass SchnorrSignature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        if (bytes.length !== 64)\n            throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${bytes.length}`);\n        const r = bytesToNumber(bytes.subarray(0, 32));\n        const s = bytesToNumber(bytes.subarray(32, 64));\n        return new SchnorrSignature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isValidFieldElement(r) || !isWithinCurveOrder(s))\n            throw new Error('Invalid signature');\n    }\n    toHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n    toRawBytes() {\n        return hexToBytes(this.toHex());\n    }\n}\nfunction schnorrGetPublicKey(privateKey) {\n    return Point.fromPrivateKey(privateKey).toRawX();\n}\nclass InternalSchnorrSignature {\n    constructor(message, privateKey, auxRand = utils.randomBytes()) {\n        if (message == null)\n            throw new TypeError(`sign: Expected valid message, not \"${message}\"`);\n        this.m = ensureBytes(message);\n        const { x, scalar } = this.getScalar(normalizePrivateKey(privateKey));\n        this.px = x;\n        this.d = scalar;\n        this.rand = ensureBytes(auxRand);\n        if (this.rand.length !== 32)\n            throw new TypeError('sign: Expected 32 bytes of aux randomness');\n    }\n    getScalar(priv) {\n        const point = Point.fromPrivateKey(priv);\n        const scalar = point.hasEvenY() ? priv : CURVE.n - priv;\n        return { point, scalar, x: point.toRawX() };\n    }\n    initNonce(d, t0h) {\n        return numTo32b(d ^ bytesToNumber(t0h));\n    }\n    finalizeNonce(k0h) {\n        const k0 = mod(bytesToNumber(k0h), CURVE.n);\n        if (k0 === _0n)\n            throw new Error('sign: Creation of signature failed. k is zero');\n        const { point: R, x: rx, scalar: k } = this.getScalar(k0);\n        return { R, rx, k };\n    }\n    finalizeSig(R, k, e, d) {\n        return new SchnorrSignature(R.x, mod(k + e * d, CURVE.n)).toRawBytes();\n    }\n    error() {\n        throw new Error('sign: Invalid signature produced');\n    }\n    async calc() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHash;\n        const t = this.initNonce(d, await tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(await tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(await tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!(await schnorrVerify(sig, m, px)))\n            this.error();\n        return sig;\n    }\n    calcSync() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHashSync;\n        const t = this.initNonce(d, tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!schnorrVerifySync(sig, m, px))\n            this.error();\n        return sig;\n    }\n}\nasync function schnorrSign(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calc();\n}\nfunction schnorrSignSync(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calcSync();\n}\nfunction initSchnorrVerify(signature, message, publicKey) {\n    const raw = signature instanceof SchnorrSignature;\n    const sig = raw ? signature : SchnorrSignature.fromHex(signature);\n    if (raw)\n        sig.assertValidity();\n    return {\n        ...sig,\n        m: ensureBytes(message),\n        P: normalizePublicKey(publicKey),\n    };\n}\nfunction finalizeSchnorrVerify(r, P, s, e) {\n    const R = Point.BASE.multiplyAndAddUnsafe(P, normalizePrivateKey(s), mod(-e, CURVE.n));\n    if (!R || !R.hasEvenY() || R.x !== r)\n        return false;\n    return true;\n}\nasync function schnorrVerify(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(await utils.taggedHash(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        return false;\n    }\n}\nfunction schnorrVerifySync(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(utils.taggedHashSync(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        if (error instanceof ShaError)\n            throw error;\n        return false;\n    }\n}\nexport const schnorr = {\n    Signature: SchnorrSignature,\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    signSync: schnorrSignSync,\n    verifySync: schnorrVerifySync,\n};\nPoint.BASE._setWindowSize(8);\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nconst TAGS = {\n    challenge: 'BIP0340/challenge',\n    aux: 'BIP0340/aux',\n    nonce: 'BIP0340/nonce',\n};\nconst TAGGED_HASH_PREFIXES = {};\nexport const utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    mod,\n    invert,\n    isValidPrivateKey(privateKey) {\n        try {\n            normalizePrivateKey(privateKey);\n            return true;\n        }\n        catch (error) {\n            return false;\n        }\n    },\n    _bigintTo32Bytes: numTo32b,\n    _normalizePrivateKey: normalizePrivateKey,\n    hashToPrivateKey: (hash) => {\n        hash = ensureBytes(hash);\n        if (hash.length < 40 || hash.length > 1024)\n            throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n        const num = mod(bytesToNumber(hash), CURVE.n - _1n) + _1n;\n        return numTo32b(num);\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return Uint8Array.from(randomBytes(bytesLength));\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => {\n        return utils.hashToPrivateKey(utils.randomBytes(40));\n    },\n    sha256: async (...messages) => {\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-256', concatBytes(...messages));\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHash } = crypto.node;\n            const hash = createHash('sha256');\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha256 function\");\n        }\n    },\n    hmacSha256: async (key, ...messages) => {\n        if (crypto.web) {\n            const ckey = await crypto.web.subtle.importKey('raw', key, { name: 'HMAC', hash: { name: 'SHA-256' } }, false, ['sign']);\n            const message = concatBytes(...messages);\n            const buffer = await crypto.web.subtle.sign('HMAC', ckey, message);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHmac } = crypto.node;\n            const hash = createHmac('sha256', key);\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have hmac-sha256 function\");\n        }\n    },\n    sha256Sync: undefined,\n    hmacSha256Sync: undefined,\n    taggedHash: async (tag, ...messages) => {\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = await utils.sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return utils.sha256(tagP, ...messages);\n    },\n    taggedHashSync: (tag, ...messages) => {\n        if (typeof _sha256Sync !== 'function')\n            throw new ShaError('sha256Sync is undefined, you need to set it');\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = _sha256Sync(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return _sha256Sync(tagP, ...messages);\n    },\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point === Point.BASE ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_3n);\n        return cached;\n    },\n};\nObject.defineProperties(utils, {\n    sha256Sync: {\n        configurable: false,\n        get() {\n            return _sha256Sync;\n        },\n        set(val) {\n            if (!_sha256Sync)\n                _sha256Sync = val;\n        },\n    },\n    hmacSha256Sync: {\n        configurable: false,\n        get() {\n            return _hmacSha256Sync;\n        },\n        set(val) {\n            if (!_hmacSha256Sync)\n                _hmacSha256Sync = val;\n        },\n    },\n});\n","import {sha512} from '@noble/hashes/sha512';\nimport * as ed25519 from '@noble/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\ned25519.utils.sha512Sync = (...m) => sha512(ed25519.utils.concatBytes(...m));\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.sync.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.Point.fromHex(publicKey, true /* strict */);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sync.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sync.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.sync.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using acounter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = byteArray.shift() as number;\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: byteArray.shift() as number,\n      numReadonlySignedAccounts: byteArray.shift() as number,\n      numReadonlyUnsignedAccounts: byteArray.shift() as number,\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?: TransactionBlockhashCtor | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBuffer())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status =\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n      ? (\n          await connection.confirmTransaction(\n            {\n              signature: signature,\n              blockhash: transaction.recentBlockhash,\n              lastValidBlockHeight: transaction.lastValidBlockHeight,\n            },\n            options && options.commitment,\n          )\n        ).value\n      : (\n          await connection.confirmTransaction(\n            signature,\n            options && options.commitment,\n          )\n        ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  typeof SolanaJSONRPCErrorCode[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl, {Response} from './fetch-impl';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy = {\n  signature: TransactionSignature;\n} & BlockhashWithExpiryBlockHeight;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of account addresses to return post simulation state for */\n  accounts?: {\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(url.startsWith('https:') /* useHttps */);\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n        source: optional(\n          union([literal('transaction'), literal('lookupTable')]),\n        ),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: BlockheightBasedTransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` using a `TransactionConfirmationConfig` */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy:\n      | BlockheightBasedTransactionConfirmationStrategy\n      | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config =\n        strategy as BlockheightBasedTransactionConfirmationStrategy;\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const subscriptionCommitment = commitment || this.commitment;\n    let timeoutId;\n    let subscriptionId;\n    let done = false;\n\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          rawSignature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            done = true;\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    const expiryPromise = new Promise<\n      | {__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED}\n      | {__type: TransactionStatus.TIMED_OUT; timeoutMs: number}\n    >(resolve => {\n      if (typeof strategy === 'string') {\n        let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n        switch (subscriptionCommitment) {\n          case 'processed':\n          case 'recent':\n          case 'single':\n          case 'confirmed':\n          case 'singleGossip': {\n            timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n            break;\n          }\n          // exhaust enums to ensure full coverage\n          case 'finalized':\n          case 'max':\n          case 'root':\n        }\n\n        timeoutId = setTimeout(\n          () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n          timeoutMs,\n        );\n      } else {\n        let config =\n          strategy as BlockheightBasedTransactionConfirmationStrategy;\n        const checkBlockHeight = async () => {\n          try {\n            const blockHeight = await this.getBlockHeight(commitment);\n            return blockHeight;\n          } catch (_e) {\n            return -1;\n          }\n        };\n        (async () => {\n          let currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n          while (currentBlockHeight <= config.lastValidBlockHeight) {\n            await sleep(1000);\n            if (done) return;\n            currentBlockHeight = await checkBlockHeight();\n            if (done) return;\n          }\n          resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n        })();\n      }\n    });\n\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      switch (outcome.__type) {\n        case TransactionStatus.BLOCKHEIGHT_EXCEEDED:\n          throw new TransactionExpiredBlockheightExceededError(rawSignature);\n        case TransactionStatus.PROCESSED:\n          result = outcome.response;\n          break;\n        case TransactionStatus.TIMED_OUT:\n          throw new TransactionExpiredTimeoutError(\n            rawSignature,\n            outcome.timeoutMs / 1000,\n          );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: Message,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const wireMessage = message.serialize().toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result as unknown as RpcResponseAndContext<number>;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta, version}) => ({\n        meta,\n        transaction: {\n          ...transaction,\n          message: versionedMessageFromResponse(version, transaction.message),\n        },\n        version,\n      })),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedBlockResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetParsedBlockRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    return res.result;\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  async getBlockHeight(\n    commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block height information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, options);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._subscriptionsByHash[hash] = {\n        ...subscription,\n        state: 'pending',\n      };\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'subscribing',\n                };\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                };\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'pending',\n                };\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._subscriptionsByHash[hash] = {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  };\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._subscriptionsByHash[hash] = {\n                      ...subscription,\n                      state: 'subscribed',\n                    };\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'unsubscribed',\n                };\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {hmac} from '@noble/hashes/hmac';\nimport {sha256} from '@noble/hashes/sha256';\nimport * as secp256k1 from '@noble/secp256k1';\n\n// Supply a synchronous hashing algorithm to make this\n// library interoperable with the synchronous APIs in web3.js.\nsecp256k1.utils.hmacSha256Sync = (key: Uint8Array, ...msgs: Uint8Array[]) => {\n  const h = hmac.create(sha256, key);\n  msgs.forEach(msg => h.update(msg));\n  return h.digest();\n};\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.signSync>[0],\n  privKey: Parameters<typeof secp256k1.signSync>[1],\n) => secp256k1.signSync(msgHash, privKey, {der: false, recovered: true});\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'AuthorizeWithSeed' | 'InitializeAccount' | 'Withdraw';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insuffcient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","import { createFetchMiddleware } from \"@toruslabs/base-controllers\";\nimport { JRPCEngineEndCallback, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig } from \"@web3auth/base\";\n\nexport function createChainIdMiddleware(chainId: string): JRPCMiddleware<unknown, unknown> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<string>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"solana_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createProviderConfigMiddleware(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): JRPCMiddleware<unknown, unknown> {\n  return (\n    req: JRPCRequest<unknown>,\n    res: JRPCResponse<Omit<CustomChainConfig, \"chainNamespace\">>,\n    next: JRPCEngineNextCallback,\n    end: JRPCEngineEndCallback\n  ) => {\n    if (req.method === \"solana_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createConfigMiddleware(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): JRPCMiddleware<unknown, unknown> {\n  const { chainId } = providerConfig;\n\n  return mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig)]);\n}\n\nexport function createJsonRpcClient(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): {\n  networkMiddleware: JRPCMiddleware<unknown, unknown>;\n  fetchMiddleware: JRPCMiddleware<unknown, unknown>;\n} {\n  const { rpcTarget } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({ rpcTarget });\n  const networkMiddleware = mergeMiddleware([createConfigMiddleware(providerConfig), fetchMiddleware]);\n  return { networkMiddleware, fetchMiddleware };\n}\n","import type { Transaction } from \"@solana/web3.js\";\nimport { createAsyncMiddleware, JRPCMiddleware, JRPCRequest, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nexport interface IProviderHandlers {\n  requestAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getPrivateKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signTransaction: (req: JRPCRequest<{ message: Transaction }>) => Promise<Transaction>;\n  signAllTransactions: (req: JRPCRequest<{ message: Transaction[] }>) => Promise<Transaction[]>;\n  signAndSendTransaction: (req: JRPCRequest<{ message: Transaction }>) => Promise<{ signature: string }>;\n  getSecretKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signMessage: (req: JRPCRequest<{ message: Uint8Array; display?: string }>) => Promise<Uint8Array>;\n}\n\nexport function createGetAccountsMiddleware({ getAccounts }: { getAccounts: IProviderHandlers[\"getAccounts\"] }): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"getAccounts\") return next();\n\n    if (!getAccounts) throw new Error(\"WalletMiddleware - opts.getAccounts not provided\");\n    // This calls from the prefs controller\n    const accounts = await getAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createRequestAccountsMiddleware({\n  requestAccounts,\n}: {\n  requestAccounts: IProviderHandlers[\"requestAccounts\"];\n}): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"requestAccounts\") return next();\n\n    if (!requestAccounts) throw new Error(\"WalletMiddleware - opts.requestAccounts not provided\");\n    // This calls the UI login function\n    const accounts = await requestAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createGenericJRPCMiddleware<T, U>(\n  targetMethod: string,\n  handler: (req: JRPCRequest<T>) => Promise<U>\n): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware<T, unknown>(async (request, response, next) => {\n    const { method } = request;\n    if (method !== targetMethod) return next();\n\n    if (!handler) throw new Error(`WalletMiddleware - ${targetMethod} not provided`);\n\n    const result = await handler(request);\n\n    response.result = result;\n    return undefined;\n  });\n}\n\nexport function createSolanaMiddleware(providerHandlers: IProviderHandlers): JRPCMiddleware<unknown, unknown> {\n  const { getAccounts, requestAccounts, signTransaction, signAndSendTransaction, signAllTransactions, signMessage, getPrivateKey, getSecretKey } =\n    providerHandlers;\n\n  return mergeMiddleware([\n    createRequestAccountsMiddleware({ requestAccounts }),\n    createGetAccountsMiddleware({ getAccounts }),\n    createGenericJRPCMiddleware<{ message: Transaction }, Transaction>(\"signTransaction\", signTransaction),\n    createGenericJRPCMiddleware<{ message: Transaction }, { signature: string }>(\"signAndSendTransaction\", signAndSendTransaction),\n    createGenericJRPCMiddleware<{ message: Transaction[] }, Transaction[]>(\"signAllTransactions\", signAllTransactions),\n    createGenericJRPCMiddleware<{ message: Uint8Array }, Uint8Array>(\"signMessage\", signMessage),\n    createGenericJRPCMiddleware<void, string>(\"solanaPrivateKey\", getPrivateKey),\n    createGenericJRPCMiddleware<void, string>(\"solanaSecretKey\", getSecretKey),\n  ]);\n}\nexport interface AddSolanaChainParameter {\n  chainId: string; // A 0x-prefixed hexadecimal string\n  chainName: string;\n  nativeCurrency: {\n    name: string;\n    symbol: string; // 2-6 characters long\n    decimals: 18;\n  };\n  rpcUrls: string[];\n  blockExplorerUrls?: string[];\n}\n\nexport interface IChainSwitchHandlers {\n  addNewChainConfig: (req: JRPCRequest<AddSolanaChainParameter>) => Promise<void>;\n  switchSolanaChain: (req: JRPCRequest<{ chainId: string }>) => Promise<void>;\n}\nexport function createChainSwitchMiddleware({ addNewChainConfig, switchSolanaChain }: IChainSwitchHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([\n    createGenericJRPCMiddleware<AddSolanaChainParameter, void>(\"addSolanaChain\", addNewChainConfig),\n    createGenericJRPCMiddleware<{ chainId: string }, void>(\"switchSolanaChain\", switchSolanaChain),\n  ]);\n}\n\nexport interface IAccountHandlers {\n  updatePrivatekey: (req: JRPCRequest<{ privateKey: string }>) => Promise<void>;\n}\nexport function createAccountMiddleware({ updatePrivatekey }: IAccountHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([createGenericJRPCMiddleware<{ privateKey: string }, void>(\"updateAccount\", updatePrivatekey)]);\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\n\nimport { createConfigMiddleware } from \"../../../rpc/JrpcClient\";\nimport { createSolanaMiddleware, IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport abstract class BaseInjectedProvider<P> extends BaseProvider<BaseProviderConfig, BaseProviderState, P> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(_: { chainId: string }): Promise<void> {\n    return Promise.resolve();\n  }\n\n  public async setupProvider(injectedProvider: P): Promise<void> {\n    const engine = new JRPCEngine();\n\n    const providerHandlers = this.getProviderHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    engine.push(solanaMiddleware);\n\n    const configMiddleware = createConfigMiddleware(this.config.chainConfig as CustomChainConfig);\n    engine.push(configMiddleware);\n\n    const injectedProviderProxy = this.getInjectedProviderProxy(injectedProvider);\n    if (injectedProviderProxy) {\n      engine.push(injectedProviderProxy);\n    }\n\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    const { chainConfig } = this.config;\n    this.update({\n      chainId: chainConfig.chainId,\n    });\n    return chainConfig.chainId || \"\";\n  }\n\n  protected getInjectedProviderProxy(_: P): JRPCMiddleware<unknown, unknown> {\n    return undefined;\n  }\n\n  protected abstract getProviderHandlers(injectedProvider: P): IProviderHandlers;\n}\n","import { Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getBaseProviderHandlers = (injectedProvider: IBaseWalletProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : [];\n    },\n    getAccounts: async () => (injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : []),\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<Transaction> => {\n      const transaction = await injectedProvider.signTransaction(req.params.message);\n      return transaction;\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array; display?: \"utf8\" | \"hex\" }>): Promise<Uint8Array> => {\n      const sigData = await injectedProvider.signMessage(req.params.message, req.params.display);\n      return sigData.signature;\n    },\n    signAllTransactions: async (req: JRPCRequest<{ message: Transaction[] }>): Promise<Transaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transaction = await injectedProvider.signAllTransactions(req.params.message);\n      return transaction;\n    },\n    signAndSendTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n      const txRes = await injectedProvider.signAndSendTransaction(req.params.message);\n      return { signature: txRes.signature };\n    },\n  };\n  return providerHandlers;\n};\n","import { createAsyncMiddleware, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse } from \"@toruslabs/openlogin-jrpc\";\n\nimport { InjectedProvider } from \"./interface\";\n\nexport function createInjectedProviderProxyMiddleware(provider: InjectedProvider): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (req: JRPCRequest<unknown[]>, res: JRPCResponse<unknown>, _next: JRPCEngineNextCallback) => {\n    const result = await provider.request({\n      ...req,\n    });\n    res.result = result;\n  });\n}\n","import { JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nimport { IPhantomWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\n\nexport class PhantomInjectedProvider extends BaseInjectedProvider<IPhantomWalletProvider> {\n  protected getProviderHandlers(injectedProvider: IPhantomWalletProvider): IProviderHandlers {\n    return getBaseProviderHandlers(injectedProvider);\n  }\n\n  protected getInjectedProviderProxy(injectedProvider: IPhantomWalletProvider): JRPCMiddleware<unknown, unknown> {\n    return createInjectedProviderProxyMiddleware(injectedProvider);\n  }\n}\n","import { ISlopeProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSlopeHandlers } from \"./providerHandlers\";\n\nexport class SlopeInjectedProxyProvider extends BaseInjectedProvider<ISlopeProvider> {\n  protected getProviderHandlers(injectedProvider: ISlopeProvider): IProviderHandlers {\n    return getSlopeHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n","import { Connection, PublicKey, Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ISlopeProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getSlopeHandlers = (injectedProvider: ISlopeProvider, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      const { data } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getAccounts: async () => {\n      const { data } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<Transaction> => {\n      const txMessage = req.params.message;\n      if (!txMessage) throw ethErrors.rpc.invalidRequest({ message: \"Invalid transaction message\" });\n      const { data } = await injectedProvider.signTransaction(bs58.encode(txMessage.serializeMessage()));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, Buffer.from(signature));\n      return txMessage;\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      const response = await injectedProvider.signMessage(req.params.message);\n      return bs58.decode(response.data.signature);\n    },\n    signAndSendTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n      const provider = getProviderEngineProxy();\n      if (!provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n      const txMessage = req.params.message;\n      if (!txMessage) throw ethErrors.rpc.invalidRequest({ message: \"Invalid transaction message\" });\n      const { data } = await injectedProvider.signTransaction(bs58.encode(txMessage.serializeMessage()));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, Buffer.from(signature));\n      const chainConfig = (await provider.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] })) as CustomChainConfig;\n      const conn = new Connection(chainConfig.rpcTarget);\n      const res = await conn.sendRawTransaction(txMessage.serialize());\n      return { signature: res };\n    },\n    signAllTransactions: async (req: JRPCRequest<{ message: Transaction[] }>): Promise<Transaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const allTxns = req.params.message;\n      const { length } = allTxns;\n\n      const unsignedTx = [];\n\n      for (let i = 0; i < length; i++) {\n        unsignedTx.push(bs58.encode(req.params.message[i].serializeMessage()));\n      }\n      const { msg, data } = await injectedProvider.signAllTransactions(unsignedTx);\n\n      if (!data.publicKey || data.signatures?.length !== length) throw new Error(msg);\n\n      const publicKey = new PublicKey(data.publicKey);\n\n      for (let i = 0; i < length; i++) {\n        const signature = bs58.decode(data.signatures[i]);\n        allTxns[i].addSignature(publicKey, Buffer.from(signature));\n      }\n\n      return allTxns;\n    },\n  };\n  return providerHandlers;\n};\n","import { SolflareWallet } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSolflareHandlers } from \"./providerHandlers\";\n\nexport class SolflareInjectedProvider extends BaseInjectedProvider<SolflareWallet> {\n  protected getProviderHandlers(injectedProvider: SolflareWallet): IProviderHandlers {\n    return getSolflareHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n","import { Connection, Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider, SolflareWallet } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\n\nexport const getSolflareHandlers = (injectedProvider: SolflareWallet, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const solflareProviderHandlers = getBaseProviderHandlers(injectedProvider as IBaseWalletProvider);\n  solflareProviderHandlers.signAndSendTransaction = async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n    const provider = getProviderEngineProxy();\n    if (!provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const transaction = await injectedProvider.signTransaction(req.params.message);\n    const chainConfig = (await provider.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] })) as CustomChainConfig;\n    const conn = new Connection(chainConfig.rpcTarget);\n    const res = await conn.sendRawTransaction(transaction.serialize());\n    return { signature: res };\n  };\n  return solflareProviderHandlers;\n};\n","import type SolletWallet from \"@project-serum/sol-wallet-adapter\";\n\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSolletHandlers } from \"./providerHandlers\";\n\nexport class SolletInjectedProvider extends BaseInjectedProvider<SolletWallet> {\n  protected getProviderHandlers(injectedProvider: SolletWallet): IProviderHandlers {\n    return getSolletHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n","import type SolletWallet from \"@project-serum/sol-wallet-adapter\";\nimport { Connection, Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\n\nexport const getSolletHandlers = (injectedProvider: SolletWallet, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const providerHandlers = getBaseProviderHandlers(injectedProvider as IBaseWalletProvider);\n  providerHandlers.signMessage = async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n    const { signature } = await injectedProvider.sign(req.params.message, \"utf8\");\n    return signature;\n  };\n  providerHandlers.signAndSendTransaction = async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n    const provider = getProviderEngineProxy();\n    if (!provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const transaction = await injectedProvider.signTransaction(req.params.message);\n    const chainConfig = (await provider.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] })) as CustomChainConfig;\n    const conn = new Connection(chainConfig.rpcTarget);\n    const res = await conn.sendRawTransaction(transaction.serialize());\n    return { signature: res };\n  };\n  return providerHandlers;\n};\n","import { Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ITorusWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getTorusHandlers = (injectedProvider: ITorusWalletProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      const accounts = await injectedProvider.request<string[]>({\n        method: \"solana_requestAccounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getAccounts: async () => {\n      const accounts = await injectedProvider.request<string[]>({\n        method: \"solana_requestAccounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const message = await injectedProvider.signMessage(req.params.message);\n      return message;\n    },\n\n    signTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<Transaction> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.signTransaction(txMessage);\n      return response;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.sendTransaction(txMessage);\n      return { signature: response };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: Transaction[] }>): Promise<Transaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transactions = req.params.message;\n      const response = await injectedProvider.signAllTransactions(transactions);\n      return response;\n    },\n  };\n  return providerHandlers;\n};\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, isHexStrict, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ITorusWalletProvider } from \"../../../interface\";\nimport { createSolanaMiddleware } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\nimport { getTorusHandlers } from \"./providerHandlers\";\n\nexport class TorusInjectedProvider extends BaseProvider<BaseProviderConfig, BaseProviderState, ITorusWalletProvider> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(_: { chainId: string }): Promise<void> {\n    return Promise.resolve();\n  }\n\n  public async setupProvider(injectedProvider: ITorusWalletProvider): Promise<void> {\n    this.handleInjectedProviderUpdate(injectedProvider);\n    await this.setupEngine(injectedProvider);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this.provider) throw ethErrors.provider.custom({ message: \"Torus solana provider is not initialized\", code: 4902 });\n    const { chainId } = this.config.chainConfig;\n\n    const connectedChainId = await this.provider.request<unknown, string>({\n      method: \"solana_chainId\",\n    });\n\n    const connectedHexChainId = isHexStrict(connectedChainId.toString()) ? connectedChainId : `0x${parseInt(connectedChainId, 10).toString(16)}`;\n    if (chainId !== connectedHexChainId)\n      throw WalletInitializationError.rpcConnectionError(`Invalid network, net_version is: ${connectedHexChainId}, expected: ${chainId}`);\n\n    this.update({ chainId: connectedHexChainId });\n    this.provider.emit(\"connect\", { chainId: this.state.chainId });\n    this.provider.emit(\"chainChanged\", this.state.chainId);\n    return this.state.chainId;\n  }\n\n  private async setupEngine(injectedProvider: ITorusWalletProvider): Promise<void> {\n    const providerHandlers = getTorusHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    const injectedProviderProxy = createInjectedProviderProxyMiddleware(injectedProvider);\n    const engine = new JRPCEngine();\n    engine.push(solanaMiddleware);\n    engine.push(injectedProviderProxy);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  private async handleInjectedProviderUpdate(injectedProvider: ITorusWalletProvider): Promise<void> {\n    injectedProvider.on(\"accountsChanged\", async (accounts: string[]) => {\n      this.provider.emit(\"accountsChanged\", accounts);\n    });\n    injectedProvider.on(\"chainChanged\", async (chainId: string) => {\n      const connectedHexChainId = isHexStrict(chainId) ? chainId : `0x${parseInt(chainId, 10).toString(16)}`;\n      // Check if chainId changed and trigger event\n      this.configure({\n        chainConfig: { ...this.config.chainConfig, chainId: connectedHexChainId },\n      });\n      await this.setupProvider(injectedProvider);\n    });\n  }\n}\n","import { Keypair, Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport nacl from \"@toruslabs/tweetnacl-js\";\nimport { SafeEventEmitterProvider, WalletInitializationError } from \"@web3auth/base\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IProviderHandlers } from \"../../rpc/solanaRpcMiddlewares\";\n\nexport async function getProviderHandlers({\n  privKey,\n  getProviderEngineProxy,\n}: {\n  privKey: string;\n  getProviderEngineProxy: () => SafeEventEmitterProvider | null;\n}): Promise<IProviderHandlers> {\n  const keyPairGenerator = (): Keypair => {\n    return Keypair.fromSecretKey(Buffer.from(privKey, \"hex\"));\n  };\n  if (typeof privKey !== \"string\") throw WalletInitializationError.invalidParams(\"privKey must be a string\");\n  const keyPair = keyPairGenerator();\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return [keyPair.publicKey.toBase58()];\n    },\n    getAccounts: async () => [keyPair.publicKey.toBase58()],\n\n    getPrivateKey: async () => privKey,\n    getSecretKey: async () => bs58.encode(keyPair.secretKey),\n\n    signTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<Transaction> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transaction = req.params.message;\n      transaction.partialSign(keyPair);\n      return transaction;\n    },\n\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const signedMsg = nacl.sign.detached(req.params.message, keyPair.secretKey);\n      return signedMsg;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const _providerEngineProxy = getProviderEngineProxy();\n      if (!_providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n\n      const transaction = req.params.message;\n      transaction.sign(keyPair);\n\n      const sig = await _providerEngineProxy.request<string>({\n        method: \"sendTransaction\",\n        params: [bs58.encode(transaction.serialize())],\n      });\n      return { signature: sig };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: Transaction[] }>): Promise<Transaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const txns = req.params?.message;\n      for (const tx of txns || []) {\n        const transaction = tx;\n        transaction.partialSign(keyPair);\n      }\n      return txns;\n    },\n  };\n\n  return providerHandlers;\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware, JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { createJsonRpcClient } from \"../../rpc/JrpcClient\";\nimport {\n  AddSolanaChainParameter,\n  createAccountMiddleware,\n  createChainSwitchMiddleware,\n  createSolanaMiddleware,\n  IAccountHandlers,\n  IChainSwitchHandlers,\n} from \"../../rpc/solanaRpcMiddlewares\";\nimport { getProviderHandlers } from \"./solanaPrivateKeyUtils\";\n\nexport interface SolanaPrivKeyProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\nexport interface SolanaPrivKeyProviderState extends BaseProviderState {\n  privateKey?: string;\n}\nexport class SolanaPrivateKeyProvider extends BaseProvider<BaseProviderConfig, SolanaPrivKeyProviderState, string> {\n  constructor({ config, state }: { config: SolanaPrivKeyProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public static getProviderInstance = async (params: {\n    privKey: string;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n  }): Promise<SolanaPrivateKeyProvider> => {\n    const providerFactory = new SolanaPrivateKeyProvider({ config: { chainConfig: params.chainConfig } });\n    await providerFactory.setupProvider(params.privKey);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.state.privateKey)\n      throw ethErrors.provider.custom({ message: \"Private key is not found in state, plz pass it in constructor state param\", code: 4902 });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request<unknown, string[]>({ method: \"eth_accounts\" });\n  }\n\n  public async setupProvider(privKey: string): Promise<void> {\n    const providerHandlers = await getProviderHandlers({ privKey, getProviderEngineProxy: this.getProviderEngineProxy.bind(this) });\n\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n\n    const engine = new JRPCEngine();\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(this.getChainSwitchMiddleware());\n    engine.push(this.getAccountMiddleware());\n    engine.push(solanaMiddleware);\n    engine.push(networkMiddleware);\n\n    const provider = providerFromEngine(engine);\n\n    this.updateProviderEngineProxy(provider);\n\n    await this.lookupNetwork();\n  }\n\n  public async updateAccount(params: { privateKey: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const existingKey = await this._providerEngineProxy.request<unknown, string>({ method: \"solanaPrivateKey\" });\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n      this._providerEngineProxy.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request<unknown, string[]>({ method: \"requestAccounts\" }),\n      });\n    }\n  }\n\n  public async switchChain(params: { chainId: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\",\n    });\n    this.configure({ chainConfig });\n    const privKey = await this._providerEngineProxy.request<unknown, string>({ method: \"solanaPrivateKey\" });\n    await this.setupProvider(privKey);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const health = await this._providerEngineProxy.request<unknown, string>({\n      method: \"getHealth\",\n      params: [],\n    });\n    const { chainConfig } = this.config;\n    if (health !== \"ok\")\n      throw WalletInitializationError.rpcConnectionError(`Failed to lookup network for following rpc target: ${chainConfig.rpcTarget}`);\n    this.update({ chainId: chainConfig.chainId });\n    if (this.state.chainId !== chainConfig.chainId) {\n      this.provider.emit(\"chainChanged\", this.state.chainId);\n      this.provider.emit(\"connect\", { chainId: this.state.chainId });\n    }\n    return this.state.chainId;\n  }\n\n  private getChainSwitchMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const chainSwitchHandlers: IChainSwitchHandlers = {\n      addNewChainConfig: async (req: JRPCRequest<AddSolanaChainParameter>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        const { chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency } = req.params;\n\n        if (!chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n        if (!rpcUrls || rpcUrls.length === 0) throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n        if (!nativeCurrency) throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n        this.addChain({\n          chainNamespace: CHAIN_NAMESPACES.SOLANA,\n          chainId,\n          ticker: nativeCurrency?.symbol || \"SOL\",\n          tickerName: nativeCurrency?.name || \"Solana\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: blockExplorerUrls?.[0] || \"\",\n        });\n      },\n      switchSolanaChain: async (req: JRPCRequest<{ chainId: string }>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n        await this.switchChain(req.params);\n      },\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  private getAccountMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const accountHandlers: IAccountHandlers = {\n      updatePrivatekey: async (req: JRPCRequest<{ privateKey: string }>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.privateKey) throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n        const { privateKey } = req.params;\n        await this.updateAccount({ privateKey });\n      },\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n}\n","import { Transaction } from \"@solana/web3.js\";\nimport { RequestArguments, SafeEventEmitterProvider } from \"@web3auth/base\";\n\nimport { ISolanaWallet } from \"./interface\";\n\nexport class SolanaWallet implements ISolanaWallet {\n  public provider: SafeEventEmitterProvider;\n\n  constructor(provider: SafeEventEmitterProvider) {\n    this.provider = provider;\n  }\n\n  public async requestAccounts(): Promise<string[]> {\n    const accounts = await this.provider.request<string[]>({\n      method: \"requestAccounts\",\n      params: {},\n    });\n    return accounts;\n  }\n\n  public async signAndSendTransaction(transaction: Transaction): Promise<{ signature: string }> {\n    const { signature } = await this.provider.request<{ signature: string }>({\n      method: \"signAndSendTransaction\",\n      params: {\n        message: transaction,\n      },\n    });\n    return { signature };\n  }\n\n  public async signTransaction(transaction: Transaction): Promise<Transaction> {\n    const signedTransaction = (await this.provider.request({\n      method: \"signTransaction\",\n      params: {\n        message: transaction,\n      },\n    })) as Transaction;\n    return signedTransaction;\n  }\n\n  public async signAllTransactions(transactions: Transaction[]): Promise<Transaction[]> {\n    const signedTransactions = (await this.provider.request({\n      method: \"signAllTransactions\",\n      params: {\n        message: transactions,\n      },\n    })) as Transaction[];\n    return signedTransactions;\n  }\n\n  public async signMessage(data: Uint8Array): Promise<Uint8Array> {\n    const response = await this.provider.request<Uint8Array>({\n      method: \"signMessage\",\n      params: {\n        message: data,\n      },\n    });\n    return response as Uint8Array;\n  }\n\n  public async request<T>(args: RequestArguments): Promise<T> {\n    const result = await this.provider.request<T>(args);\n    return result as T;\n  }\n}\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(require(\"text-encoding-utf-8\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", { fatal: true });\nfunction baseEncode(value) {\n    if (typeof value === \"string\") {\n        value = Buffer.from(value, \"utf8\");\n    }\n    return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n    return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybeResize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    writeU8(value) {\n        this.maybeResize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    writeU16(value) {\n        this.maybeResize();\n        this.buf.writeUInt16LE(value, this.length);\n        this.length += 2;\n    }\n    writeU32(value) {\n        this.maybeResize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    writeU64(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n    writeU128(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n    writeU256(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n    writeU512(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n    writeBuffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([\n            Buffer.from(this.buf.subarray(0, this.length)),\n            buffer,\n            Buffer.alloc(INITIAL_LENGTH),\n        ]);\n        this.length += buffer.length;\n    }\n    writeString(str) {\n        this.maybeResize();\n        const b = Buffer.from(str, \"utf8\");\n        this.writeU32(b.length);\n        this.writeBuffer(b);\n    }\n    writeFixedArray(array) {\n        this.writeBuffer(Buffer.from(array));\n    }\n    writeArray(array, fn) {\n        this.maybeResize();\n        this.writeU32(array.length);\n        for (const elem of array) {\n            this.maybeResize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n                    throw new BorshError(\"Reached the end of buffer when deserializing\");\n                }\n            }\n            throw e;\n        }\n    };\n}\nclass BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    readU8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.buf.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readU64() {\n        const buf = this.readBuffer(8);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU128() {\n        const buf = this.readBuffer(16);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU256() {\n        const buf = this.readBuffer(32);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU512() {\n        const buf = this.readBuffer(64);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readBuffer(len) {\n        if (this.offset + len > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    readString() {\n        const len = this.readU32();\n        const buf = this.readBuffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    readFixedArray(len) {\n        return new Uint8Array(this.readBuffer(len));\n    }\n    readArray(fn) {\n        const len = this.readU32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU16\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU256\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU512\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readString\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === \"string\") {\n            writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.writeFixedArray(value);\n            }\n            else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n                if (value.length !== fieldType[1]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n                }\n                for (let i = 0; i < fieldType[1]; i++) {\n                    serializeField(schema, null, value[i], fieldType[0], writer);\n                }\n            }\n            else {\n                writer.writeArray(value, (item) => {\n                    serializeField(schema, fieldName, item, fieldType[0], writer);\n                });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case \"option\": {\n                    if (value === null || value === undefined) {\n                        writer.writeU8(0);\n                    }\n                    else {\n                        writer.writeU8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                case \"map\": {\n                    writer.writeU32(value.size);\n                    value.forEach((val, key) => {\n                        serializeField(schema, fieldName, key, fieldType.key, writer);\n                        serializeField(schema, fieldName, val, fieldType.value, writer);\n                    });\n                    break;\n                }\n                default:\n                    throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction serializeStruct(schema, obj, writer) {\n    if (typeof obj.borshSerialize === \"function\") {\n        obj.borshSerialize(writer);\n        return;\n    }\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === \"enum\") {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.writeU8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n    const writer = new Writer();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === \"string\") {\n            return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                return reader.readFixedArray(fieldType[0]);\n            }\n            else if (typeof fieldType[1] === \"number\") {\n                const arr = [];\n                for (let i = 0; i < fieldType[1]; i++) {\n                    arr.push(deserializeField(schema, null, fieldType[0], reader));\n                }\n                return arr;\n            }\n            else {\n                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n            }\n        }\n        if (fieldType.kind === \"option\") {\n            const option = reader.readU8();\n            if (option) {\n                return deserializeField(schema, fieldName, fieldType.type, reader);\n            }\n            return undefined;\n        }\n        if (fieldType.kind === \"map\") {\n            let map = new Map();\n            const length = reader.readU32();\n            for (let i = 0; i < length; i++) {\n                const key = deserializeField(schema, fieldName, fieldType.key, reader);\n                const val = deserializeField(schema, fieldName, fieldType.value, reader);\n                map.set(key, val);\n            }\n            return map;\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction deserializeStruct(schema, classType, reader) {\n    if (typeof classType.borshDeserialize === \"function\") {\n        return classType.borshDeserialize(reader);\n    }\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === \"enum\") {\n        const idx = reader.readU8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n","'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n","'use strict';\n\nconst uuid = require('uuid').v4;\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Client = void 0;\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _websocket = _interopRequireDefault(require(\"./lib/client/websocket.browser\"));\n\nvar _client = _interopRequireDefault(require(\"./lib/client\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar Client = /*#__PURE__*/function (_CommonClient) {\n  (0, _inherits2[\"default\"])(Client, _CommonClient);\n\n  var _super = _createSuper(Client);\n\n  function Client() {\n    var address = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"ws://localhost:8080\";\n\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$autoconnect = _ref.autoconnect,\n        autoconnect = _ref$autoconnect === void 0 ? true : _ref$autoconnect,\n        _ref$reconnect = _ref.reconnect,\n        reconnect = _ref$reconnect === void 0 ? true : _ref$reconnect,\n        _ref$reconnect_interv = _ref.reconnect_interval,\n        reconnect_interval = _ref$reconnect_interv === void 0 ? 1000 : _ref$reconnect_interv,\n        _ref$max_reconnects = _ref.max_reconnects,\n        max_reconnects = _ref$max_reconnects === void 0 ? 5 : _ref$max_reconnects;\n\n    var generate_request_id = arguments.length > 2 ? arguments[2] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, Client);\n    return _super.call(this, _websocket[\"default\"], address, {\n      autoconnect: autoconnect,\n      reconnect: reconnect,\n      reconnect_interval: reconnect_interval,\n      max_reconnects: max_reconnects\n    }, generate_request_id);\n  }\n\n  return (0, _createClass2[\"default\"])(Client);\n}(_client[\"default\"]);\n\nexports.Client = Client;","/**\n * \"Client\" wraps \"ws\" or a browser-implemented \"WebSocket\" library\n * according to the environment providing JSON RPC 2.0 support on top.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar __rest = void 0 && (void 0).__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}; // @ts-ignore\n\n\nvar CommonClient = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(CommonClient, _EventEmitter);\n\n  var _super = _createSuper(CommonClient);\n\n  /**\n   * Instantiate a Client class.\n   * @constructor\n   * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n   * @param {String} address - url to a websocket server\n   * @param {Object} options - ws options object with reconnect parameters\n   * @param {Function} generate_request_id - custom generation request Id\n   * @return {CommonClient}\n   */\n  function CommonClient(webSocketFactory) {\n    var _this;\n\n    var address = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"ws://localhost:8080\";\n\n    var _a = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var generate_request_id = arguments.length > 3 ? arguments[3] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, CommonClient);\n\n    var _a$autoconnect = _a.autoconnect,\n        autoconnect = _a$autoconnect === void 0 ? true : _a$autoconnect,\n        _a$reconnect = _a.reconnect,\n        reconnect = _a$reconnect === void 0 ? true : _a$reconnect,\n        _a$reconnect_interval = _a.reconnect_interval,\n        reconnect_interval = _a$reconnect_interval === void 0 ? 1000 : _a$reconnect_interval,\n        _a$max_reconnects = _a.max_reconnects,\n        max_reconnects = _a$max_reconnects === void 0 ? 5 : _a$max_reconnects,\n        rest_options = __rest(_a, [\"autoconnect\", \"reconnect\", \"reconnect_interval\", \"max_reconnects\"]);\n\n    _this = _super.call(this);\n    _this.webSocketFactory = webSocketFactory;\n    _this.queue = {};\n    _this.rpc_id = 0;\n    _this.address = address;\n    _this.autoconnect = autoconnect;\n    _this.ready = false;\n    _this.reconnect = reconnect;\n    _this.reconnect_interval = reconnect_interval;\n    _this.max_reconnects = max_reconnects;\n    _this.rest_options = rest_options;\n    _this.current_reconnects = 0;\n\n    _this.generate_request_id = generate_request_id || function () {\n      return ++_this.rpc_id;\n    };\n\n    if (_this.autoconnect) _this._connect(_this.address, Object.assign({\n      autoconnect: _this.autoconnect,\n      reconnect: _this.reconnect,\n      reconnect_interval: _this.reconnect_interval,\n      max_reconnects: _this.max_reconnects\n    }, _this.rest_options));\n    return _this;\n  }\n  /**\n   * Connects to a defined server if not connected already.\n   * @method\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(CommonClient, [{\n    key: \"connect\",\n    value: function connect() {\n      if (this.socket) return;\n\n      this._connect(this.address, Object.assign({\n        autoconnect: this.autoconnect,\n        reconnect: this.reconnect,\n        reconnect_interval: this.reconnect_interval,\n        max_reconnects: this.max_reconnects\n      }, this.rest_options));\n    }\n    /**\n     * Calls a registered RPC method on server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object|Array} params - optional method parameters\n     * @param {Number} timeout - RPC reply timeout value\n     * @param {Object} ws_opts - options passed to ws\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"call\",\n    value: function call(method, params, timeout, ws_opts) {\n      var _this2 = this;\n\n      if (!ws_opts && \"object\" === (0, _typeof2[\"default\"])(timeout)) {\n        ws_opts = timeout;\n        timeout = null;\n      }\n\n      return new Promise(function (resolve, reject) {\n        if (!_this2.ready) return reject(new Error(\"socket not ready\"));\n\n        var rpc_id = _this2.generate_request_id(method, params);\n\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null,\n          id: rpc_id\n        };\n\n        _this2.socket.send(JSON.stringify(message), ws_opts, function (error) {\n          if (error) return reject(error);\n          _this2.queue[rpc_id] = {\n            promise: [resolve, reject]\n          };\n\n          if (timeout) {\n            _this2.queue[rpc_id].timeout = setTimeout(function () {\n              delete _this2.queue[rpc_id];\n              reject(new Error(\"reply timeout\"));\n            }, timeout);\n          }\n        });\n      });\n    }\n    /**\n     * Logins with the other side of the connection.\n     * @method\n     * @param {Object} params - Login credentials object\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(params) {\n        var resp;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.call(\"rpc.login\", params);\n\n              case 2:\n                resp = _context.sent;\n\n                if (resp) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error(\"authentication failed\");\n\n              case 5:\n                return _context.abrupt(\"return\", resp);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function login(_x) {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }()\n    /**\n     * Fetches a list of client's methods registered on server.\n     * @method\n     * @return {Array}\n     */\n\n  }, {\n    key: \"listMethods\",\n    value: function () {\n      var _listMethods = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.call(\"__listMethods\");\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function listMethods() {\n        return _listMethods.apply(this, arguments);\n      }\n\n      return listMethods;\n    }()\n    /**\n     * Sends a JSON-RPC 2.0 notification to server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object} params - optional method parameters\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"notify\",\n    value: function notify(method, params) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!_this3.ready) return reject(new Error(\"socket not ready\"));\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null\n        };\n\n        _this3.socket.send(JSON.stringify(message), function (error) {\n          if (error) return reject(error);\n          resolve();\n        });\n      });\n    }\n    /**\n     * Subscribes for a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context3.next = 3;\n                return this.call(\"rpc.on\", event);\n\n              case 3:\n                result = _context3.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed subscribing to an event '\" + event + \"' with: \" + result[event]);\n\n              case 6:\n                return _context3.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function subscribe(_x2) {\n        return _subscribe.apply(this, arguments);\n      }\n\n      return subscribe;\n    }()\n    /**\n     * Unsubscribes from a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function () {\n      var _unsubscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context4.next = 3;\n                return this.call(\"rpc.off\", event);\n\n              case 3:\n                result = _context4.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed unsubscribing from an event with: \" + result);\n\n              case 6:\n                return _context4.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function unsubscribe(_x3) {\n        return _unsubscribe.apply(this, arguments);\n      }\n\n      return unsubscribe;\n    }()\n    /**\n     * Closes a WebSocket connection gracefully.\n     * @method\n     * @param {Number} code - socket close code\n     * @param {String} data - optional data to be sent before closing\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, data) {\n      this.socket.close(code || 1000, data);\n    }\n    /**\n     * Connection/Message handler.\n     * @method\n     * @private\n     * @param {String} address - WebSocket API address\n     * @param {Object} options - ws options object\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"_connect\",\n    value: function _connect(address, options) {\n      var _this4 = this;\n\n      this.socket = this.webSocketFactory(address, options);\n      this.socket.addEventListener(\"open\", function () {\n        _this4.ready = true;\n\n        _this4.emit(\"open\");\n\n        _this4.current_reconnects = 0;\n      });\n      this.socket.addEventListener(\"message\", function (_ref) {\n        var message = _ref.data;\n        if (message instanceof ArrayBuffer) message = Buffer.from(message).toString();\n\n        try {\n          message = JSON.parse(message);\n        } catch (error) {\n          return;\n        } // check if any listeners are attached and forward event\n\n\n        if (message.notification && _this4.listeners(message.notification).length) {\n          if (!Object.keys(message.params).length) return _this4.emit(message.notification);\n          var args = [message.notification];\n          if (message.params.constructor === Object) args.push(message.params);else // using for-loop instead of unshift/spread because performance is better\n            for (var i = 0; i < message.params.length; i++) {\n              args.push(message.params[i]);\n            } // run as microtask so that pending queue messages are resolved first\n          // eslint-disable-next-line prefer-spread\n\n          return Promise.resolve().then(function () {\n            _this4.emit.apply(_this4, args);\n          });\n        }\n\n        if (!_this4.queue[message.id]) {\n          // general JSON RPC 2.0 events\n          if (message.method && message.params) {\n            // run as microtask so that pending queue messages are resolved first\n            return Promise.resolve().then(function () {\n              _this4.emit(message.method, message.params);\n            });\n          }\n\n          return;\n        } // reject early since server's response is invalid\n\n\n        if (\"error\" in message === \"result\" in message) _this4.queue[message.id].promise[1](new Error(\"Server response malformed. Response must include either \\\"result\\\"\" + \" or \\\"error\\\", but not both.\"));\n        if (_this4.queue[message.id].timeout) clearTimeout(_this4.queue[message.id].timeout);\n        if (message.error) _this4.queue[message.id].promise[1](message.error);else _this4.queue[message.id].promise[0](message.result);\n        delete _this4.queue[message.id];\n      });\n      this.socket.addEventListener(\"error\", function (error) {\n        return _this4.emit(\"error\", error);\n      });\n      this.socket.addEventListener(\"close\", function (_ref2) {\n        var code = _ref2.code,\n            reason = _ref2.reason;\n        if (_this4.ready) // Delay close event until internal state is updated\n          setTimeout(function () {\n            return _this4.emit(\"close\", code, reason);\n          }, 0);\n        _this4.ready = false;\n        _this4.socket = undefined;\n        if (code === 1000) return;\n        _this4.current_reconnects++;\n        if (_this4.reconnect && (_this4.max_reconnects > _this4.current_reconnects || _this4.max_reconnects === 0)) setTimeout(function () {\n          return _this4._connect(address, options);\n        }, _this4.reconnect_interval);\n      });\n    }\n  }]);\n  return CommonClient;\n}(_eventemitter.EventEmitter);\n\nexports[\"default\"] = CommonClient;","/**\n * WebSocket implements a browser-side WebSocket specification.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar WebSocketBrowserImpl = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(WebSocketBrowserImpl, _EventEmitter);\n\n  var _super = _createSuper(WebSocketBrowserImpl);\n\n  /** Instantiate a WebSocket class\n   * @constructor\n   * @param {String} address - url to a websocket server\n   * @param {(Object)} options - websocket options\n   * @param {(String|Array)} protocols - a list of protocols\n   * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n   */\n  function WebSocketBrowserImpl(address, options, protocols) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, WebSocketBrowserImpl);\n    _this = _super.call(this);\n    _this.socket = new window.WebSocket(address, protocols);\n\n    _this.socket.onopen = function () {\n      return _this.emit(\"open\");\n    };\n\n    _this.socket.onmessage = function (event) {\n      return _this.emit(\"message\", event.data);\n    };\n\n    _this.socket.onerror = function (error) {\n      return _this.emit(\"error\", error);\n    };\n\n    _this.socket.onclose = function (event) {\n      _this.emit(\"close\", event.code, event.reason);\n    };\n\n    return _this;\n  }\n  /**\n   * Sends data through a websocket connection\n   * @method\n   * @param {(String|Object)} data - data to be sent via websocket\n   * @param {Object} optionsOrCallback - ws options\n   * @param {Function} callback - a callback called once the data is sent\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(WebSocketBrowserImpl, [{\n    key: \"send\",\n    value: function send(data, optionsOrCallback, callback) {\n      var cb = callback || optionsOrCallback;\n\n      try {\n        this.socket.send(data);\n        cb();\n      } catch (error) {\n        cb(error);\n      }\n    }\n    /**\n     * Closes an underlying socket\n     * @method\n     * @param {Number} code - status code explaining why the connection is being closed\n     * @param {String} reason - a description why the connection is closing\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, reason) {\n      this.socket.close(code, reason);\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, listener, options) {\n      this.socket.addEventListener(type, listener, options);\n    }\n  }]);\n  return WebSocketBrowserImpl;\n}(_eventemitter.EventEmitter);\n/**\n * factory method for common WebSocket instance\n * @method\n * @param {String} address - url to a websocket server\n * @param {(Object)} options - websocket options\n * @return {Undefined}\n */\n\n\nfunction _default(address, options) {\n  return new WebSocketBrowserImpl(address, options);\n}","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nmodule.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}\nmodule.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _getPrototypeOf(o);\n}\nmodule.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var setPrototypeOf = require(\"./setPrototypeOf.js\");\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\nmodule.exports = _inherits, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar assertThisInitialized = require(\"./assertThisInitialized.js\");\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return assertThisInitialized(self);\n}\nmodule.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _setPrototypeOf(o, p);\n}\nmodule.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n"],"names":["checkUint8Array","b","Uint8Array","TypeError","uint8ArrayToBuffer","buffer_1","from","buffer","byteOffset","length","Layout","constructor","span","property","Number","isInteger","makeDestinationObject","getSpan","offset","RangeError","replicate","rv","Object","create","prototype","assign","fromArray","values","nameWithProperty","name","lo","ExternalLayout","isCount","Error","GreedyCount","elementSpan","decode","rem","Math","floor","encode","src","OffsetLayout","layout","UInt","UIntBE","readUIntLE","writeUIntLE","readUIntBE","writeUIntBE","Int","readIntLE","writeIntLE","IntBE","readIntBE","writeIntBE","V2E32","pow","divmodInt64","hi32","lo32","roundedInt64","NearUInt64","readUInt32LE","split","writeUInt32LE","NearUInt64BE","readUInt32BE","writeUInt32BE","NearInt64","readInt32LE","writeInt32LE","NearInt64BE","readInt32BE","writeInt32BE","Float","readFloatLE","writeFloatLE","FloatBE","readFloatBE","writeFloatBE","Double","readDoubleLE","writeDoubleLE","DoubleBE","readDoubleBE","writeDoubleBE","Sequence","elementLayout","count","idx","i","push","elo","reduce","v","Structure","fields","decodePrefixes","Array","isArray","acc","undefined","fd","e","fsp","dest","firstOffset","lastOffset","lastWrote","fv","shift","layoutFor","offsetOf","UnionDiscriminator","UnionLayoutDiscriminator","Union","discr","defaultLayout","discriminator","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","bind","getSourceVariant","configGetSourceVariant","gsv","vlo","getVariant","hasOwnProperty","call","tag","dlo","clo","contentOffset","addVariant","variant","VariantLayout","vb","union","fixBitwiseResult","BitStructure","word","msb","value","_packedSetValue","_packedGetValue","addField","bits","bf","BitField","addBoolean","Boolean","fieldFor","container","totalBits","usedBits","sum","valueMask","start","wordMask","wordValue","Blob","slice","srcBuffer","write","toString","CString","String","srcb","copy","UTF8","maxSpan","Constant","exports","number","n","isSafeInteger","bytes","lengths","includes","assert","bool","hash","outputLen","blockLen","exists","instance","checkFinished","destroyed","finished","output","out","min","createView","self","crypto","arr","DataView","byteLength","rotr","Uint32Array","padStart","toBytes","data","str","TextEncoder","utf8ToBytes","Hash","clone","this","_cloneInto","wrapConstructor","hashConstructor","hashC","message","update","digest","tmp","SHA2","padOffset","isLE","super","pos","view","len","take","set","subarray","process","dataView","roundClean","digestInto","fill","setBigUint64","_32n","BigInt","_u32_max","wh","wl","h","l","setUint32","oview","get","forEach","res","destroy","to","U32_MASK64","fromBig","le","lst","Ah","Al","toBig","shrSH","s","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","add","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5H","Eh","add5L","El","SHA512_Kh","SHA512_Kl","u64","map","SHA512_W_H","SHA512_W_L","SHA512","Fh","Fl","Gh","Gl","Hh","Hl","getUint32","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","CHIl","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","SHA512_256","SHA384","sha512","_0n","_1n","_2n","CU_O","CURVE","freeze","a","d","P","Gx","Gy","POW_2_256","SQRT_M1","SQRT_AD_MINUS_ONE","INVSQRT_A_MINUS_D","ONE_MINUS_D_SQ","D_MINUS_ONE_SQ","ExtendedPoint","x","y","z","t","static","p","Point","equals","ZERO","mod","points","toInv","nums","inverted","invert","num","reduceRight","invertBatch","toAffine","toAffineBatch","fromAffine","other","assertExtPoint","X1","Y1","Z1","X2","Y2","Z2","X1Z2","X2Z1","Y1Z2","Y2Z1","negate","double","A","B","C","D","x1y1","E","G","F","H","X3","Y3","T3","Z3","T1","T2","subtract","precomputeWindow","W","windows","base","window","wNAF","affinePoint","BASE","_WINDOW_SIZE","precomputes","pointPrecomputes","normalizeZ","f","windowSize","mask","maxNumber","shiftBy","wbits","pr","cached","abs","multiply","scalar","normalizeScalar","multiplyUnsafe","P0","isSmallOrder","isTorsionFree","invZ","ax","ay","fromRistrettoBytes","legacyRist","toRistrettoBytes","fromRistrettoHash","assertRstPoint","RistrettoPoint","ep","r0","r","Ns","c","isValid","Ns_D_is_sq","uvRatio","s_","edIsNegative","Nt","s2","W0","W1","W2","W3","hex","r1","bytes255ToNumberLE","ensureBytes","R1","calcElligatorRistrettoMap","r2","R2","emsg","b1","b2","equalBytes","numberTo32BytesLE","u1","u2","u1_2","u2_2","I","invertSqrt","Dx","Dy","toRawBytes","u2sq","invsqrt","D1","D2","zInv","_x","_y","toHex","bytesToHex","one","two","WeakMap","_setWindowSize","delete","strict","normed","bytesToNumberLE","y2","u","isXOdd","privateKey","getExtendedPublicKey","point","toX25519","Signature","assertValidity","fromHex","u8","concatBytes","arrays","every","result","pad","hexes","uint8a","hexToBytes","array","j","hexByte","byte","parseInt","isNaN","numberTo32BytesBE","reverse","MAX_255B","modulo","q","m","gcd","pow2","power","pow_2_252_3","_5n","_10n","_20n","_40n","_80n","b4","b5","b10","b20","b40","b80","b160","b240","b250","pow_p_5_8","v3","v7","vx2","root1","root2","useRoot1","useRoot2","noRoot","modlLE","expectedLength","max","adjustBytes25519","checkPrivateKey","key","getKeyFromHash","hashed","head","prefix","pointBytes","_sha512Sync","sha512s","async","utils","getExtendedPublicKeySync","prepareVerification","sig","publicKey","SB","pub","msg","finishVerification","k","kA","sync","getPublicKey","sign","R","verify","node","nodeCrypto","web","TORSION_SUBGROUP","hashToPrivateScalar","randomBytes","bytesLength","getRandomValues","randomPrivateKey","subtle","createHash","precompute","sha512Sync","defineProperties","configurable","val","Maj","SHA256_K","IV","SHA256_W","SHA256","W15","s0","s1","sha256","StructError","failure","failures","rest","path","join","isObject","print","JSON","stringify","shiftIterator","input","done","next","toFailure","context","struct","branch","type","refinement","toFailures","Symbol","iterator","run","options","coerce","ctx","coercer","schema","valid","validator","entries","ts","Map","Set","refiner","Struct","props","validate","is","tuples","tuple","define","Element","boolean","Class","literal","constant","description","never","nullable","optional","record","Key","Value","string","Elements","Never","keys","Structs","S","first","unknown","condition","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_7n","_256n","_0x71n","round","SHA3_IOTA_H","SHA3_IOTA_L","rotlH","rotlL","Keccak","suffix","enableXOF","rounds","posOut","state","state32","keccak","idx1","idx0","B0","B1","Th","Tl","curH","curL","PI","keccakP","finish","writeInto","bufferOut","xofInto","xof","gen","keccak_256","genShake","hashCons","opts","wrapConstructorWithOpts","dkLen","HMAC","_key","iHash","oHash","buf","getPrototypeOf","hmac","_3n","_8n","beta","weistrass","x2","x3","USE_ENDOMORPHISM","ShaError","JacobianPoint","scratch","Z1Z1","Z2Z2","U1","U2","S1","S2","x1b","HH","HHH","V","k1neg","k1","k2neg","k2","splitScalarEndo","k1p","k2p","fake","f1p","f2p","iz1","iz2","iz3","hasEvenY","isShort","bytesToNumber","isValidFieldElement","_6n","_11n","_22n","_23n","_44n","_88n","b3","b6","b9","b11","b22","b44","b88","b176","b220","b223","t1","t2","sqrtMod","isYOdd","header","fromCompressedHex","fromUncompressedHex","normalizePrivateKey","msgHash","signature","recovery","truncateHash","normalizeSignature","numTo32bStr","rinv","Q","multiplyAndAddUnsafe","isCompressed","toHexX","toRawX","left","aP","bQ","sliceDER","parseDERInt","hexToNumber","sBytes","rBytesLeft","parseDERSignature","fromDER","isWithinCurveOrder","hasHighS","HALF","normalizeS","toDERRawBytes","toDERHex","sHex","numberToHexUnpadded","rHex","rLen","sLen","toCompactRawBytes","toCompactHex","numTo32b","divNearest","ENDO","a1","a2","POW_2_128","c1","c2","delta","_sha256Sync","_hmacSha256Sync","HmacDrbg","counter","hmacSha256","hmacSync","checkSync","incr","seed","reseedSync","generateSync","kmdToSig","kBytes","error","fromCompact","bits2int","bits2octets","z1","z2","int2octets","initSigArgs","extraEntropy","h1","seedArgs","finalizeSig","recSig","canonical","der","recovered","TAGGED_HASH_PREFIXES","isValidPrivateKey","_bigintTo32Bytes","_normalizePrivateKey","hashToPrivateKey","messages","ckey","importKey","createHmac","sha256Sync","hmacSha256Sync","taggedHash","tagP","tagH","charCodeAt","taggedHashSync","ed25519","generateKeypair","privateScalar","secretKey","isOnCurve","toBuffer","Buffer","properties","serialize","SOLANA_SCHEMA","deserialize","deserializeUnchecked","PUBLIC_KEY_LENGTH","uniquePublicKeyCounter","PublicKey","_bn","isPublicKeyData","decoded","bs58","BN","eq","toBase58","toJSON","toArrayLike","zeroPad","fromPublicKey","programId","publicKeyBytes","seeds","createProgramAddressSync","address","nonce","seedsWithNonce","concat","err","findProgramAddressSync","pubkeyData","default","kind","PACKET_DATA_SIZE","TransactionExpiredBlockheightExceededError","defineProperty","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","writable","readonly","index","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","pubkey","BufferLayout","rustString","rsl","_decode","_encode","rslShim","chars","alloc","getAlloc","getItemAlloc","item","field","decodeLength","size","elem","encodeLength","rem_len","CompiledKeys","payer","keyMetaMap","getOrInsertDefault","keyMeta","isSigner","isWritable","isInvoked","payerKeyMeta","ix","accountMeta","getMessageComponents","mapEntries","writableSigners","filter","readonlySigners","writableNonSigners","readonlyNonSigners","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","payerAddress","extractTableLookup","lookupTable","writableIndexes","drainedWritableKeys","drainKeysFoundInLookupTable","addresses","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","Message","args","accountKeys","recentBlockhash","indexToProgramIds","account","version","compiledInstructions","accounts","addressTableLookups","getAccountKeys","compiledKeys","compile","payerKey","isAccountSigner","isAccountWritable","numSignedAccounts","isProgramId","has","programIds","nonProgramIds","_","numKeys","keyCount","shortvec","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","signDataLayout","transaction","signData","byteArray","accountCount","dataSlice","messageArgs","MessageV0","numAccountKeysFromLookups","lookup","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","tableLookup","tableAccount","find","lookupTableAccounts","extractResult","addressTableLookup","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","serializedMessageLength","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","maskedPrefix","splice","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","TransactionStatus","DEFAULT_SIGNATURE","TransactionInstruction","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","_message","_json","blockhash","nonceInstruction","signers","items","compileMessage","console","warn","accountMetas","uniqueMetas","pubkeyString","uniqueIndex","sort","localeCompare","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","indexOf","invariant","_compile","pair","serializeMessage","connection","getFeeForMessage","setSigners","seen","uniqueSigners","signer","_partialSign","partialSign","_addSignature","addSignature","sigpair","verifySignatures","_verifySignatures","requireAllSignatures","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","minContextSlot","sendTransaction","status","confirmTransaction","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","nonceAccount","blob","encodeDecode","bigIntLayout","toBigIntLE","bigInt","toBufferLE","SYSTEM_INSTRUCTION_LAYOUTS","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","UpgradeNonceAccount","SystemProgram","params","lamports","space","fromPubkey","newAccountPubkey","basePubkey","toPubkey","accountPubkey","createAccountWithSeed","noncePubkey","createAccount","initParams","nonceInitialize","authorized","instructionData","newAuthorizedPubkey","Loader","ceil","chunkSize","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","allocate","owner","transfer","dataLayout","transactions","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","objToString","objKeys","obj","isArrayProp","propVal","toStr","isFinite","returnVal","trailingZeros","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","getFirstSlotInEpoch","getLastSlotInEpoch","SendTransactionError","logs","SolanaJSONRPCError","customMessage","code","globalThis","fetch","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","typeIndex","decodeData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","PublicKeyFromString","RawAccountDataResult","BufferFromRawAccountData","extractCommitmentFromConfig","commitmentOrConfig","specifiedCommitment","specifiedConfig","createRpcResult","pick","jsonrpc","id","UnknownRpcResult","jsonRpcResult","jsonRpcResultAndContext","notificationResultAndContext","versionedMessageFromResponse","response","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","GetLeaderScheduleResult","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","source","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","rewardType","GetParsedBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","GetRecentPerformanceSamplesRpcResult","numTransactions","numSlots","samplePeriodSecs","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","COMMON_HTTP_HEADERS","Connection","endpoint","wsEndpoint","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","client","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","confirmTransactionInitialTimeout","putativeUrl","test","assertEndpointUrl","matches","match","hostish","portWithColon","protocol","startsWith","startPort","makeWebsocketUrl","url","customFetch","fetchImpl","fetchWithMiddleware","info","init","modifiedFetchArgs","reject","modifiedInfo","modifiedInit","RpcClient","request","callback","method","body","agent","headers","too_many_requests_retries","waitTime","log","statusText","text","ok","createRpcClient","requests","batch","methodName","createRpcBatchRequest","RpcWebSocketClient","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","_buildArgs","getBalanceAndContext","then","catch","configArg","tokenMintAddress","tokenAddress","ownerAddress","_args","arg","mintAddress","getAccountInfoAndContext","publicKeys","rawConfig","getMultipleAccountsInfoAndContext","configOrCommitment","encoding","configWithoutEncoding","strategy","rawSignature","decodedSignature","subscriptionCommitment","timeoutId","subscriptionId","confirmationPromise","onSignature","__type","PROCESSED","expiryPromise","timeoutMs","TIMED_OUT","checkBlockHeight","getBlockHeight","_e","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","outcome","race","clearTimeout","removeSignatureListener","startSlot","limit","getSignatureStatuses","getSupply","excludeNonCirculatingAccountsList","epochSchedule","wireMessage","getRecentBlockhashAndContext","getLatestBlockhashAndContext","_buildArgsAtLeastConfirmed","extra","unsafeRes","block","endSlot","transactionDetails","firstAvailableBlock","getFirstAvailableBlock","getConfirmedBlockSignatures","until","highestConfirmedRoot","getSlot","before","getConfirmedSignaturesForAddress2","accountInfo","fromAccountData","getNonceAndContext","disableCache","expired","Date","now","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getLatestBlockhash","MS_PER_SLOT","transactionOrMessage","configOrSigners","includeAccounts","encodedTransaction","originalTx","_blockhashWithExpiryBlockHeight","sigVerify","traceIndent","logTrace","signersOrOptions","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","notify","_updateSubscriptions","MAX_SAFE_INTEGER","clearInterval","close","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","_handleServerNotification","callbackArgs","cb","notification","_makeSubscription","subscriptionConfig","clientSubscriptionId","fastStableStringify","existingSubscription","onAccountChange","_unsubscribeClientSubscription","accountId","onProgramAccountChange","filters","onLogs","mentions","onSlotChange","onSlotUpdate","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","Keypair","keypair","_keypair","skipValidation","computedPublicKey","ii","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","bigintLayout","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableProgram","lookupTableAddress","bumpSeed","recentSlot","addr","recipient","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","SetComputeUnitPrice","ComputeBudgetProgram","microLamports","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","instructionIndex","PUBLIC_KEY_BYTES","SIGNATURE_BYTES","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","PRIVATE_KEY_BYTES","fromSecretKey","createInstructionWithPublicKey","secp256k1","msgs","ecdsaSign","privKey","drbg","publicKeyCreate","fromPrivateKey","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","recoveryId","createInstructionWithEthAddress","ethAddress","publicKeyToEthAddress","rawAddress","substr","ETHEREUM_ADDRESS_BYTES","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","STAKE_CONFIG_ID","Lockup","unixTimestamp","custodian","STAKE_INSTRUCTION_LAYOUTS","Initialize","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","Staker","Withdrawer","StakeProgram","stakePubkey","lockup","maybeLockup","staker","withdrawer","initialize","stakeAuthorizationType","custodianPubkey","newAuthorized","authorityBase","authoritySeed","authorityOwner","splitStakePubkey","splitInstruction","sourceStakePubKey","VOTE_INSTRUCTION_LAYOUTS","InitializeAccount","Voter","VoteProgram","voteInit","authorizedVoter","authorizedWithdrawer","initializeAccount","voteAuthorizationType","currentAuthorityDerivedKeyBasePubkey","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","voteAuthorizeWithSeedArgs","authorizedWithdrawerPubkey","currentVoteAccountBalance","rentExemptMinimum","withdraw","website","details","keybaseUsername","_Buffer","require","module","ALPHABET","BASE_MAP","charAt","xc","LEADER","FACTOR","iFACTOR","decodeUnsafe","psz","zeroes","b256","carry","it3","it4","vch","allocUnsafe","isBuffer","pbegin","pend","b58","it1","it2","repeat","basex","base64","ieee754","customInspectSymbol","K_MAX_LENGTH","createBuffer","setPrototypeOf","encodingOrOffset","isEncoding","actual","fromString","ArrayBuffer","isView","arrayView","isInstance","fromArrayBuffer","fromArrayLike","fromArrayView","SharedArrayBuffer","valueOf","checked","numberIsNaN","fromObject","toPrimitive","assertSize","mustMatch","arguments","loweredCase","base64ToBytes","toLowerCase","slowToString","end","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","bidirectionalIndexOf","dir","arrayIndexOf","lastIndexOf","indexSize","arrLength","valLength","read","readUInt16BE","foundIndex","found","hexWrite","remaining","strLen","utf8Write","blitBuffer","asciiWrite","asciiToBytes","base64Write","ucs2Write","units","hi","utf16leToBytes","fromByteArray","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","decodeCodePointsArray","TYPED_ARRAY_SUPPORT","proto","foo","typedArraySupport","enumerable","poolSize","allocUnsafeSlow","_isBuffer","compare","list","swap16","swap32","swap64","toLocaleString","inspect","replace","trim","target","thisStart","thisEnd","thisCopy","targetCopy","_arr","ret","hexSliceLookupTable","checkOffset","ext","checkInt","wrtBigUInt64LE","checkIntBI","wrtBigUInt64BE","checkIEEE754","writeFloat","littleEndian","noAssert","writeDouble","newBuf","readUintLE","mul","readUintBE","readUint8","readUInt8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUint32BE","readBigUInt64LE","defineBigIntMethod","validateNumber","last","boundsError","readBigUInt64BE","readInt8","readInt16LE","readInt16BE","readBigInt64LE","readBigInt64BE","writeUintLE","writeUintBE","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUint32BE","writeBigUInt64LE","writeBigUInt64BE","sub","writeInt8","writeInt16LE","writeInt16BE","writeBigInt64LE","writeBigInt64BE","targetStart","copyWithin","errors","sym","getMessage","Base","stack","addNumericalSeparator","ERR_OUT_OF_RANGE","checkBounds","ERR_INVALID_ARG_TYPE","ERR_BUFFER_OUT_OF_BOUNDS","received","INVALID_BASE64_RE","leadSurrogate","toByteArray","base64clean","dst","alphabet","table","i16","fn","BufferBigIntNotDefined","createChainIdMiddleware","chainId","req","createProviderConfigMiddleware","providerConfig","createConfigMiddleware","mergeMiddleware","createJsonRpcClient","rpcTarget","createFetchMiddleware","networkMiddleware","createGetAccountsMiddleware","_ref","getAccounts","createAsyncMiddleware","_context","createRequestAccountsMiddleware","_ref3","requestAccounts","_context2","createGenericJRPCMiddleware","targetMethod","handler","_context3","createSolanaMiddleware","providerHandlers","signTransaction","signAndSendTransaction","signAllTransactions","signMessage","getPrivateKey","getSecretKey","BaseInjectedProvider","_inherits","_classCallCheck","_super","chainConfig","chainNamespace","CHAIN_NAMESPACES","_createClass","injectedProvider","engine","JRPCEngine","getProviderHandlers","solanaMiddleware","configMiddleware","injectedProviderProxy","getInjectedProviderProxy","provider","providerFromEngine","updateProviderEngineProxy","lookupNetwork","_lookupNetwork","BaseProvider","getBaseProviderHandlers","_requestAccounts","_getAccounts","_getPrivateKey","ethErrors","_getSecretKey","_context5","_context6","display","sigData","_req$params","_req$params2","_context7","_context8","txRes","createInjectedProviderProxyMiddleware","_next","PhantomInjectedProvider","SlopeInjectedProxyProvider","getProviderEngineProxy","_yield$injectedProvid","_yield$injectedProvid2","txMessage","_yield$injectedProvid3","_yield$injectedProvid4","conn","allTxns","unsignedTx","_yield$injectedProvid5","_data$signatures","getSlopeHandlers","SolflareInjectedProvider","solflareProviderHandlers","getSolflareHandlers","SolletInjectedProvider","getSolletHandlers","getTorusHandlers","_req$params3","_req$params4","_req$params5","TorusInjectedProvider","handleInjectedProviderUpdate","setupEngine","connectedChainId","connectedHexChainId","isHexStrict","WalletInitializationError","emit","_context4","_this","configure","_objectSpread","setupProvider","_getProviderHandlers","keyPairGenerator","_context9","keyPair","signedMsg","nacl","_providerEngineProxy","txns","_req$params6","_iterator","tx","SolanaPrivateKeyProvider","_enable","_createJsonRpcClient","getChainSwitchMiddleware","getAccountMiddleware","getChainConfig","health","chainSwitchHandlers","addNewChainConfig","chainName","rpcUrls","blockExplorerUrls","nativeCurrency","addChain","ticker","symbol","tickerName","displayName","blockExplorer","switchSolanaChain","switchChain","_ref6","createChainSwitchMiddleware","accountHandlers","updatePrivatekey","_this2","updateAccount","_ref7","createAccountMiddleware","providerFactory","SolanaWallet","_defineProperty","_yield$this$provider$","signedTransaction","signedTransactions","reversed","width","__createBinding","o","__setModuleDefault","__decorate","decorators","desc","getOwnPropertyDescriptor","Reflect","decorate","__importStar","__esModule","__importDefault","BinaryReader","BinaryWriter","BorshError","baseDecode","baseEncode","bn_js_1","bs58_1","textDecoder","TextDecoder","fatal","INITIAL_LENGTH","fieldPath","originalMessage","addToFieldPath","fieldName","maybeResize","writeU8","writeU16","writeU32","writeU64","writeBuffer","toArray","writeU128","writeU256","writeU512","writeString","writeFixedArray","writeArray","handlingRangeError","propertyKey","propertyDescriptor","originalMethod","readU8","readU16","readU32","readU64","readBuffer","readU128","readU256","readU512","readString","readFixedArray","readArray","capitalizeFirstLetter","toUpperCase","serializeField","fieldType","writer","serializeStruct","borshSerialize","structSchema","deserializeField","reader","deserializeStruct","classType","borshDeserialize","Writer","Reader","Events","EE","once","addListener","emitter","event","listener","evt","_events","_eventsCount","clearEvent","EventEmitter","__proto__","eventNames","events","names","getOwnPropertySymbols","listeners","handlers","ee","listenerCount","a3","a4","a5","removeListener","removeAllListeners","off","prefixed","uuid","generateRequest","ClientBrowser","callServer","reviver","replacer","generator","notificationIdNull","isBatch","hasCallback","_parseResponse","responseText","parse","isError","isNotError","_interopRequireDefault","_createClass2","_classCallCheck2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_websocket","_createSuper","Derived","hasNativeReflectConstruct","construct","sham","Proxy","_isNativeReflectConstruct","Super","NewTarget","Client","_CommonClient","_ref$autoconnect","_ref$reconnect","reconnect","_ref$reconnect_interv","reconnect_interval","_ref$max_reconnects","generate_request_id","_regenerator","_asyncToGenerator2","_typeof2","_eventemitter","__rest","propertyIsEnumerable","CommonClient","_EventEmitter","webSocketFactory","_a","_a$autoconnect","_a$reconnect","_a$reconnect_interval","_a$max_reconnects","rest_options","queue","rpc_id","ready","current_reconnects","_connect","socket","timeout","ws_opts","send","promise","_login","mark","_callee","resp","wrap","prev","sent","abrupt","stop","_listMethods","_callee2","_this3","_subscribe","_callee3","_x2","_unsubscribe","_callee4","_x3","_this4","addEventListener","_ref2","reason","WebSocketBrowserImpl","protocols","WebSocket","onopen","onmessage","onerror","onclose","optionsOrCallback","rnds8","rng","msCrypto","REGEX","byteToHex","rnds","random","ReferenceError","asyncGeneratorStep","_throw","Constructor","_defineProperties","descriptor","protoProps","staticProps","_getPrototypeOf","subClass","superClass","_typeof","assertThisInitialized","_setPrototypeOf","inRange","ToDictionary","Stream","tokens","endOfStream","prepend","token","pop","decoderError","opt_code_point","DEFAULT_ENCODING","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","stream","bite","code_point","UTF8Encoder","temp","input_stream","code_points","cp","codePointsToString","opt_string","stringToCodePoints"],"sourceRoot":""}